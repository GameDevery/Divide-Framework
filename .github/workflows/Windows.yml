# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Windows Builds

on:
  schedule:
    - cron: "0 0 * * *"
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      runner_type:
        description: 'Runner type to run on (GitHub or Self Hosted)'
        required: false
        default: 'GitHub'
        type: choice
        options:
        - GitHub
        - self-hosted

run-name: Windows Build - ${{ github.ref_name }} - ${{ github.event.inputs.runner_type || 'GitHub Runner' }}

jobs:
  check_date:
    runs-on: windows-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }})&& echo "should_run=false" >> "$GITHUB_OUTPUT"

  info_job:
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}

    name: Windows - Print Info
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner_type == 'self-hosted') && fromJson('["self-hosted","Windows"]') || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
      
    - name: Print dev cmd info
      uses: ilammy/msvc-dev-cmd@v1
      with:
          arch: amd64_x86
      
    - name: Print MSVC version
      run: cl.exe

    - name: Print CLANG version
      run: clang.exe --version 

  msvc_job_game:
    needs: info_job
    name: Windows - MSVC Game Builds
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner_type == 'self-hosted') && fromJson('["self-hosted","Windows"]') || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.29.2
        ninjaVersion: 1.11.1

    - name: Clean workspace (self-hosted only)
      if: runner.self-hosted
      run: |
        if (Test-Path "${{ github.workspace }}\vcpkg\downloads\tools") {
          Remove-Item -Recurse -Force "${{ github.workspace }}\vcpkg\downloads\tools"
        }

    - name: Restore from cache and setup vcpkg executable and data files.
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Build and test Game in Release mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-msvc'
        buildPreset: 'windows-msvc-release'
        testPreset: 'test-windows-msvc-release'
            
    - name: Build and test Game in Profile mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-msvc'
        buildPreset: 'windows-msvc-profile'
        testPreset: 'test-windows-msvc-profile'

    - name: Build and test Game in Debug mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-msvc'
        buildPreset: 'windows-msvc-debug'
        testPreset: 'test-windows-msvc-debug'

  msvc_job_editor:
    needs: info_job
    name: Windows - MSVC Editor Builds
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner_type == 'self-hosted') && fromJson('["self-hosted","Windows"]') || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.29.2
        ninjaVersion: 1.11.1

    - name: Clean workspace (self-hosted only)
      if: runner.self-hosted
      run: |
        if (Test-Path "${{ github.workspace }}\vcpkg\downloads\tools") {
          Remove-Item -Recurse -Force "${{ github.workspace }}\vcpkg\downloads\tools"
        }

    - name: Restore from cache and setup vcpkg executable and data files.
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Build and test Editor in Release mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-msvc-editor'
        buildPreset: 'windows-msvc-release-editor'
        testPreset: 'test-windows-msvc-release-editor'

    #- name: Build and test Editor in Profile mode
    #  uses: lukka/run-cmake@v10
    #  with:
    #    configurePreset: 'windows-msvc-editor'
    #    buildPreset: 'windows-msvc-profile-editor'
    #    testPreset: 'test-windows-msvc-profile-editor'

    - name: Build and test Editor in Debug mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-msvc-editor'
        buildPreset: 'windows-msvc-debug-editor'
        testPreset: 'test-windows-msvc-debug-editor'

  clang_job_game:
    needs: info_job
    name: Windows - Clang Game Builds
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner_type == 'self-hosted') && fromJson('["self-hosted","Windows"]') || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.29.2
        ninjaVersion: 1.11.1

    - name: Clean workspace (self-hosted only)
      if: runner.self-hosted
      run: |
        if (Test-Path "${{ github.workspace }}\vcpkg\downloads\tools") {
          Remove-Item -Recurse -Force "${{ github.workspace }}\vcpkg\downloads\tools"
        }

    - name: Restore from cache and setup vcpkg executable and data files.
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Build and test Game in Release mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-clang'
        buildPreset: 'windows-clang-release'
        testPreset: 'test-windows-clang-release'

    - name: Build and test Game in Profile mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-clang'
        buildPreset: 'windows-clang-profile'
        testPreset: 'test-windows-clang-profile'
        
    - name: Build and test Game in Debug mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-clang'
        buildPreset: 'windows-clang-debug'
        testPreset: 'test-windows-clang-debug'
    
  clang_job_editor:
    needs: info_job
    name: Windows - Clang Editor Builds
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner_type == 'self-hosted') && fromJson('["self-hosted","Windows"]') || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.29.2
        ninjaVersion: 1.11.1

    - name: Clean workspace (self-hosted only)
      if: runner.self-hosted
      run: |
        if (Test-Path "${{ github.workspace }}\vcpkg\downloads\tools") {
          Remove-Item -Recurse -Force "${{ github.workspace }}\vcpkg\downloads\tools"
        }

    - name: Restore from cache and setup vcpkg executable and data files.
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Build and test Editor in Release mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-clang-editor'
        buildPreset: 'windows-clang-release-editor'
        testPreset: 'test-windows-clang-release-editor'

    #- name: Build and test Editor in Profile mode
    #  uses: lukka/run-cmake@v10
    #  with:
    #    configurePreset: 'windows-clang-editor'
    #    buildPreset: 'windows-clang-profile-editor'
    #    testPreset: 'test-windows-clang-profile-editor'

    - name: Build and test Editor in Debug mode
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-clang-editor'
        buildPreset: 'windows-clang-debug-editor'
        testPreset: 'test-windows-clang-debug-editor'

  output_job:
    needs: [msvc_job_game, msvc_job_editor, clang_job_game, clang_job_editor]
    name: Finished builds
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Retrieve results
        run: |
          result=""
          if [[ "$\{{ contains(needs.msvc_job_game.result, 'failure') }}" == "true" || "$\{{ contains(needs.msvc_job_editor.result, 'failure') }}" == "true" ]]; then
            result="MSVC builds failed."
          elif [[ "$\{{ contains(needs.clang_job_game.result, 'failure') }}" == "true" || "$\{{ contains(needs.clang_job_editor.result, 'failure') }}" == "true" ]]; then
            result="CLANG builds failed"
          elif [[ "$\{{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            result="Builds cancelled."
          else
            result="Success!"
          fi
          echo "result=$result" >> $GITHUB_OUTPUT
