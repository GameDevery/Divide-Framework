#ifndef _NODE_DATA_INPUT_CMN_
#define _NODE_DATA_INPUT_CMN_

vec4 positionFromDepth(in float depth,
                       in mat4 invProjectionMatrix,
                       in vec2 uv) {

    vec4 pos = vec4(2.0 * uv.x - 1.0,
        2.0 * uv.y - 1.0,
        2.0 * depth - 1.0,
        1.0);

    pos = invProjectionMatrix * pos;
    pos /= pos.w;

    return pos;
}

#if defined(COMPUTE_SHADER)
struct IndirectDrawCommand {
    uint count;
    uint instanceCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

layout(binding = BUFFER_GPU_COMMANDS, std430) coherent buffer dvd_GPUCmds
{
    IndirectDrawCommand dvd_drawCommands[MAX_VISIBLE_NODES];
};
#endif

// This could be split up in the future into frequent-infrequent blocks depending on update rate
layout(binding = BUFFER_GPU_BLOCK, std140) uniform dvd_GPUBlock
{
    mat4  dvd_ProjectionMatrix;
    mat4  dvd_InvProjectionMatrix;
    mat4  dvd_ViewMatrix;
    mat4  dvd_ViewProjectionMatrix;
    vec4  dvd_cameraPosition; ///xyz - position, w - aspect ratio
    vec4  dvd_ViewPort;
    vec4  dvd_ZPlanesCombined; //xy - current, zw - main scene
    vec4  dvd_renderProperties;
    vec4  dvd_frustumPlanes[MAX_CLIP_PLANES];
    vec4  dvd_clip_plane[MAX_CLIP_PLANES];
};

vec2 dvd_invScreenDimensions() {
    return dvd_ViewPort.zw * 0.5;
}

#define dvd_zPlanes vec2(dvd_ZPlanesCombined.xy)
#define dvd_mainCameraZPlanes vec2(dvd_ZPlanesCombined.zw)
#define dvd_aspectRatio dvd_cameraPosition.w
#define dvd_fieldOfView dvd_renderProperties.z
#define dvd_tanHalfFieldOfView dvd_renderProperties.w

layout(binding = BUFFER_SCENE_DATA, std140) uniform dvd_SceneData
{
    // x,y,z - colour, w - density
    vec4   dvd_fogDetails;
    // x,y,z - direction, w - speed
    vec4   dvd_windDetails;
    //x - light bleed bias, y - min shadow variance, z - fade distance, w - max distance
    vec4   dvd_shadowingSettings;
    //x - elapsed time, y - debug render, z - renderer flag, w - reserved
    vec4   dvd_otherData;
    // x - delta time, y - detail level, z - shadow detail level, w - reserved
    vec4   dvd_otherData2;
    vec4   dvd_waterPositionsW/*[MAX_WATER_BODIES]*/;
    //x = width, y = length, z = depth
    vec4   dvd_waterDetails/*[MAX_WATER_BODIES]*/;
};

#define dvd_fogColour dvd_fogDetails.xyz
#define dvd_fogDensity dvd_fogDetails.w
#define dvd_time int(dvd_otherData.x)
#define dvd_showDebugInfo int(dvd_otherData.y)
#define dvd_deltaTime (int(dvd_otherData2.x))
#define dvd_renderDetailLevel (int(dvd_otherData2.y))
#define dvd_shadowDetailLevel (int(dvd_otherData2.z))

#if defined(VERT_SHADER) || defined(GEOM_SHADER)
out float gl_ClipDistance[MAX_CLIP_PLANES];

void setClipPlanes(in vec4 worldSpaceVertex) {
    for(int i = 0; i < MAX_CLIP_PLANES; ++i) {
        gl_ClipDistance[i] = dot(worldSpaceVertex, dvd_clip_plane[i]);
    }
}
#endif

//mix(false, true, condition);

#endif //_NODE_DATA_INPUT_CMN_