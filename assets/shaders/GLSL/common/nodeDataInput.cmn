#ifndef _NODE_DATA_INPUT_CMN_
#define _NODE_DATA_INPUT_CMN_

#if defined(COMPUTE_SHADER)
struct IndirectDrawCommand {
    uint count;
    uint instanceCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

layout(binding = BUFFER_GPU_COMMANDS, std430) coherent buffer dvd_GPUCmds
{
    IndirectDrawCommand dvd_drawCommands[MAX_VISIBLE_NODES];
};
#endif

layout(binding = BUFFER_GPU_BLOCK, std140) uniform dvd_GPUBlock
{
    mat4  dvd_ProjectionMatrix;
    mat4  dvd_ViewMatrix;
    mat4  dvd_ViewProjectionMatrix;
    vec4  dvd_cameraPosition; ///xyz - position, w - aspect ratio
    vec4  dvd_ViewPort;
    vec4  dvd_ZPlanesCombined; //xy - current, zw - main scene 
    vec4  dvd_invScreenDimensions;
    vec4  dvd_renderProperties;
    vec4  dvd_frustumPlanes[6];
    vec4  dvd_clip_plane[MAX_CLIP_PLANES];
};

#define dvd_shadowArrayOffset int(dvd_renderProperties.x)
#define dvd_GSInvocationLimit int(dvd_renderProperties.y)
#define dvd_aspectRatio dvd_cameraPosition.w
#define dvd_fieldOfView dvd_renderProperties.z
#define dvd_tanHalfFieldOfView dvd_renderProperties.w

layout(binding = BUFFER_SCENE_DATA, std140) uniform dvd_SceneData
{
    vec4   dvd_fogDetails;
    vec4   dvd_windDetails;
    vec4   dvd_shadowingSettings;
    vec4   dvd_otherData;
    vec4   dvd_otherData2;
    uvec4  dvd_lightCountPerType;
    //uint  dvd_lightCountPerType[MAX_LIGHT_TYPES];
};

#define dvd_fogColour dvd_fogDetails.xyz
#define dvd_fogDensity dvd_fogDetails.w
#define dvd_time int(dvd_otherData.x)
#define dvd_showDebugInfo int(dvd_otherData.y)

int dvd_deltaTime() {
    return int(dvd_otherData2.x);
}

bool dvd_shadowsEnabled() {
    return int(dvd_otherData.z) == 1;
}

#if defined(VERT_SHADER)

invariant gl_Position;
//out float gl_ClipDistance[MAX_CLIP_PLANES];

void setClipPlanes(in vec4 worldSpaceVertex) {
    
#if MAX_CLIP_PLANES > 0
    gl_ClipDistance[0] = dot(worldSpaceVertex, dvd_clip_plane[0]);
#   if MAX_CLIP_PLANES > 1
        gl_ClipDistance[1] = dot(worldSpaceVertex, dvd_clip_plane[1]);
#       if MAX_CLIP_PLANES > 2
            gl_ClipDistance[2] = dot(worldSpaceVertex, dvd_clip_plane[2]);
#           if MAX_CLIP_PLANES > 3
                gl_ClipDistance[3] = dot(worldSpaceVertex, dvd_clip_plane[3]);
#               if MAX_CLIP_PLANES > 4
                    gl_ClipDistance[4] = dot(worldSpaceVertex, dvd_clip_plane[4]);
#                   if MAX_CLIP_PLANES > 5
                        gl_ClipDistance[5] = dot(worldSpaceVertex, dvd_clip_plane[5]);
#                   endif
#               endif
#           endif
#       endif
#   endif
#endif
}
#endif

//mix(false, true, condition);

#endif //_NODE_DATA_INPUT_CMN_