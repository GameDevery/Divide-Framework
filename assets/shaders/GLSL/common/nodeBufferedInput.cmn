#ifndef _NODE_BUFFERED_INPUT_CMN_
#define _NODE_BUFFERED_INPUT_CMN_

#if defined(OVERRIDE_DATA_IDX)
uniform uint DATA_INDICES = 0u;
#else //OVERRIDE_DATA_IDX
#define DATA_INDICES VAR._baseInstance
#endif //OVERRIDE_DATA_IDX

#define TRANSFORM_IDX (DATA_INDICES >> 16)
#define MATERIAL_IDX (DATA_INDICES & 0xFFFF)

//Ref: https://github.com/urho3d/Urho3D/blob/master/bin/CoreData/Shaders/GLSL/PBRLitSolid.glsl
#if defined(USE_ALBEDO_ALPHA) || defined(USE_OPACITY_MAP)
#   define HAS_TRANSPARENCY
#endif //USE_ALBEDO_ALPHA || USE_OPACITY_MAP

#include "nodeDataDefinition.cmn"

layout(binding = BUFFER_NODE_TRANSFORM_DATA, std430) coherent ACCESS_R buffer dvd_TransformBlock
{
    NodeTransformData dvd_Transforms[];
};

#if defined(FRAG_SHADER) || defined(NEED_MATERIAL_DATA)
layout(binding = BUFFER_NODE_MATERIAL_DATA, std430) coherent ACCESS_R buffer dvd_MaterialBlock 
{
    NodeMaterialData dvd_Materials[];
};

#if defined(USE_BINDLESS_TEXTURES)
#define texDiffuse0   samplerUnit0(dvd_Materials[MATERIAL_IDX]._texDiffuse0Opacity.xy)
#define texOpacityMap samplerOpacity(dvd_Materials[MATERIAL_IDX]._texDiffuse0Opacity.zw)
#define texDiffuse1   samplerUnit1(dvd_Materials[MATERIAL_IDX]._texDiffuse1OMR.xy)
#define texOMR        samplerOMR(dvd_Materials[MATERIAL_IDX]._texDiffuse1OMR.zw)
#define texHeight     samplerHeight(dvd_Materials[MATERIAL_IDX]._texHeightProjected.xy)
#define texProjected  samplerProj(dvd_Materials[MATERIAL_IDX]._texHeightProjected.zw)
#define texNormalMap  samplerNormal(dvd_Materials[MATERIAL_IDX]._texNormalMapPadding.xy)
#else //USE_BINDLESS_TEXTURES
layout(binding = TEXTURE_UNIT0)      uniform samplerUnit0 texDiffuse0;
layout(binding = TEXTURE_UNIT1)      uniform samplerUnit1 texDiffuse1;
layout(binding = TEXTURE_HEIGHT)     uniform samplerHeight texHeight;
layout(binding = TEXTURE_OMR)        uniform samplerOMR texOMR;
layout(binding = TEXTURE_OPACITY)    uniform samplerOpacity texOpacityMap;
layout(binding = TEXTURE_NORMALMAP)  uniform samplerNormal texNormalMap;
layout(binding = TEXTURE_PROJECTION) uniform samplerProj texProjected;
#endif //USE_BINDLESS_TEXTURES

#endif //FRAG_SHADER || NEED_MATERIAL_DATA

#include "sceneData.cmn"

#endif //_NODE_BUFFERED_INPUT_CMN_
