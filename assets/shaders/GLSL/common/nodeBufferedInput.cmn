#ifndef _NODE_BUFFERED_INPUT_CMN_
#define _NODE_BUFFERED_INPUT_CMN_

//Ref: https://github.com/urho3d/Urho3D/blob/master/bin/CoreData/Shaders/GLSL/PBRLitSolid.glsl
#include "nodeDataDefinition.cmn"

DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_BATCH, 3, std430) coherent ACCESS_R buffer dvd_TransformBlock
{
    NodeTransformData dvd_Transforms[];
};

#if defined(VERT_SHADER)
#if defined(OVERRIDE_DATA_IDX)
uniform uint INDIRECT_DATA_IDX;
#else //OVERRIDE_DATA_IDX
#define INDIRECT_DATA_IDX (DVD_GL_BASE_INSTANCE - 1u)
#endif //OVERRIDE_DATA_IDX

DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_BATCH, 4, std430) coherent ACCESS_R buffer dvd_IndirectionBlock
{
    NodeIndirectionData dvd_IndirectionData[];
};

void ComputeIndirectionData()
{
    const NodeIndirectionData indirectionData = dvd_IndirectionData[INDIRECT_DATA_IDX];
    TRANSFORM_IDX = indirectionData._transformIdx;
    MATERIAL_IDX = indirectionData._materialIdx;
    TEXTURE_IDX = indirectionData._texturesIdx * MATERIAL_TEXTURE_COUNT;
    SELECTION_FLAG = indirectionData._selectionIdx;
}

#endif //VERT_SHADER

#if defined(FRAG_SHADER)
DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_BATCH, 5, std430) coherent ACCESS_R buffer dvd_MaterialBlock
{
    NodeMaterialData dvd_Materials[];
};

#endif //FRAG_SHADER

#if defined(FRAG_SHADER) || defined(NEED_TEXTURE_DATA_ALL_STAGES)

#if defined(USE_UNIT0_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 0)  uniform sampler2DArray texDiffuse0;
#endif //USE_UNIT0_TEXTURE
#if defined(USE_OPACITY_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 1)  uniform sampler2DArray texOpacityMap;
#endif //USE_OPACITY_TEXTURE
#if defined(USE_NORMALMAP_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 2)  uniform sampler2DArray texNormalMap;
#endif //USE_NORNALMAP_TEXTURE
#if defined(USE_HEIGHTMAP_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 3)  uniform sampler2DArray texHeight;
#endif //USE_HEIGHTMAP_TEXTURE
#if defined(USE_SPECULAR_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 4)  uniform sampler2DArray texSpecular;
#endif //USE_SPECULAR_TEXTURE
#if defined(USE_METALNESS_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 5)  uniform sampler2DArray texMetalness;
#endif //USE_METALNESS_TEXTURE
#if defined(USE_ROUGHNESS_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 6)  uniform sampler2DArray texRoughness;
#endif //USE_ROUGHNESS_TEXTURE
#if defined(USE_OCCLUSION_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 7)  uniform sampler2DArray texOcclusion;
#endif //USE_OCCLUSION_TEXTURE
#if defined(USE_EMISSIVE_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 8)  uniform sampler2DArray texEmissive;
#endif //USE_EMISSIVE_TEXTURE
#if defined(USE_UNIT1_TEXTURE)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 9)  uniform sampler2DArray texDiffuse1;
#endif //USE_UNIT1_TEXTURE

#if !defined(SKIP_REFLECT_REFRACT)
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 10) uniform sampler2D      texReflectPlanar;
DESCRIPTOR_SET_RESOURCE(PER_DRAW, 11) uniform sampler2D      texRefractPlanar;
#endif //!SKIP_REFLECT_REFRACT

#endif //FRAG_SHADE || NEED_TEXTURE_DATA_ALL_STAGES

#include "sceneData.cmn"

#endif //_NODE_BUFFERED_INPUT_CMN_
