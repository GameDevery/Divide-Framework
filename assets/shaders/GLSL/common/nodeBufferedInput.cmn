#ifndef _NODE_BUFFERED_INPUT_CMN_
#define _NODE_BUFFERED_INPUT_CMN_

struct NodeData {
    mat4 _matrix1;
    mat4 _matrix2;
    mat4 _matrix3;
    mat4 _matrix4;
};

layout(binding = SHADER_BUFFER_NODE_INFO, std430) coherent readonly buffer dvd_MatrixBlock
{
    NodeData dvd_Matrices;
};

#define dvd_WorldMatrix   dvd_Matrices._matrix1
#define dvd_NormalMatrix  mat3(dvd_Matrices._matrix2)

#if defined(VERT_SHADER)
#define dvd_lightCount    uint(dvd_Matrices._matrix2[3][2])
#define dvd_boneCount     uint(dvd_Matrices._matrix2[3][3])
#endif

#if defined(FRAG_SHADER)
// x - isSelected; y - isShadowMapped; z - textureCount; w - reserved
#define buffer_integerValues dvd_Matrices._matrix4[0] 
// x - useAlphaTest; y - textureOperation; z,w - reserved
#define buffer_matProperties dvd_Matrices._matrix4[1] 

#define dvd_isSelected    (buffer_integerValues.x > 0.0)
#define dvd_shadowMapping (buffer_integerValues.y > 0.0)
#define dvd_useAlphaTest  (buffer_matProperties.x > 0.0)
#define dvd_TextureCount  uint(buffer_matProperties.z)
#define dvd_texOperation  uint(buffer_matProperties.y)
#define dvd_MatAmbient    dvd_Matrices._matrix3[0].rgb
#define dvd_MatDiffuse    dvd_Matrices._matrix3[1]
#define dvd_MatSpecular   dvd_Matrices._matrix3[2].rgb
#define dvd_MatEmissive   dvd_Matrices._matrix3[3].rgb
#define dvd_MatShininess  dvd_Matrices._matrix3[3].w

#endif

#endif //_NODE_BUFFERED_INPUT_CMN_