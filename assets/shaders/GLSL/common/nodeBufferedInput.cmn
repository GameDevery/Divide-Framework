#ifndef _NODE_BUFFERED_INPUT_CMN_
#define _NODE_BUFFERED_INPUT_CMN_

struct NodeData {
    mat4 _worldMatrix;
    // [0][0] ... [2][2] = normal matrix
    // [0][3] = bone count
    // [1][3] = reflection index
    // [2][3] = refraction index
    // [3][0] ... [3][3] = bounding sphere
    mat4 _normalMatrixW;
    // [0][0] ... [0][3] = albedo
    // [1][0] ... [1][3] = specular
    // [2][0] ... [2][3] = emissive
    // [3][0] = is translucent
    // [3][1] = texture operation
    // [3][2] = texture count
    // [3][3] = parallax factor
    mat4 _colourMatrix;
    // x = selection flag
    // y = is shadow received
    // z = lod level
    // w = occlusion flag
    vec4 _properties;
};

layout(binding = BUFFER_NODE_INFO, std430) coherent readonly buffer dvd_MatrixBlock
{
    NodeData dvd_Matrices[MAX_VISIBLE_NODES];
};

mat4 dvd_WorldMatrix(in uint index) {
    return dvd_Matrices[index]._worldMatrix;
}

mat4 dvd_WorldViewMatrix(in uint index) {
    return dvd_ViewMatrix * dvd_WorldMatrix(index);
}

mat3 dvd_NormalMatrixWV(in uint index) {
    return mat3(dvd_ViewMatrix) * mat3(dvd_Matrices[index]._normalMatrixW);
}

mat3 dvd_NormalMatrixW(in uint index) {
    return mat3(dvd_Matrices[index]._normalMatrixW);
}

#if defined(VERT_SHADER)
#define dvd_boneCount     uint(dvd_Matrices[VAR.dvd_baseInstance]._normalMatrixW[0][3])
#endif

// x - isSelected/isHighlighted; y - isShadowMapped; z - lodLevel, w - occlusion cull data
#define dvd_lodLevel int(dvd_Matrices[VAR.dvd_baseInstance]._properties.z)
#define dvd_customData dvd_Matrices[VAR.dvd_baseInstance]._properties.w

#if defined(FRAG_SHADER)
NodeData dvd_private_node_data = dvd_Matrices[VAR.dvd_baseInstance];
// x - textureOperation; y - parallax/relief mapping factor, z - reserved, w - reserved
#define buffer_matProperties dvd_private_node_data._colourMatrix[3]

#define dvd_texOperation    uint(buffer_matProperties.x)
#define dvd_parallaxFactor  buffer_matProperties.y
#define dvd_reliefFactor    dvd_parallaxFactor
#define dvd_reflectionIndex uint(dvd_private_node_data._normalMatrixW[1][3])
#define dvd_refractionIndex uint(dvd_private_node_data._normalMatrixW[2][3])

#endif

#endif //_NODE_BUFFERED_INPUT_CMN_
