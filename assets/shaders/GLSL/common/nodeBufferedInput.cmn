#ifndef _NODE_BUFFERED_INPUT_CMN_
#define _NODE_BUFFERED_INPUT_CMN_

flat VARYING uint dvd_drawID;

struct NodeData {
    mat4 _matrix[4];
};

layout(binding = BUFFER_NODE_INFO, std430) coherent readonly buffer dvd_MatrixBlock
{
    NodeData dvd_Matrices[];
};

#define dvd_WorldMatrix   dvd_Matrices[dvd_drawID]._matrix[0]
#define dvd_NormalMatrix  mat3(dvd_Matrices[dvd_drawID]._matrix[1])

#if defined(VERT_SHADER)
#define dvd_boneCount     uint(dvd_Matrices[dvd_drawID]._matrix[1][3][2])
#endif

// x - isSelected; y - isShadowMapped; z - lodLevel, w - reserved
#define buffer_integerValues dvd_Matrices[dvd_drawID]._matrix[3][0] 
#define dvd_lodLevel int(buffer_integerValues.z)

#if defined(FRAG_SHADER)
// x - useAlphaTest; y - textureOperation; z - textureCount, w - parallax/relief mapping factor
#define buffer_matProperties dvd_Matrices[dvd_drawID]._matrix[3][1] 

#define dvd_isSelected     (buffer_integerValues.x > 0.0)
#define dvd_shadowMapping  (buffer_integerValues.y > 0.0)
#define dvd_useAlphaTest   (buffer_matProperties.x > 0.0)
#define dvd_parallaxFactor buffer_matProperties.w
#define dvd_reliefFactor   buffer_matProperties.w
#define dvd_textureCount   uint(buffer_matProperties.z)
#define dvd_texOperation   uint(buffer_matProperties.y)
#define dvd_MatAmbient     dvd_Matrices[dvd_drawID]._matrix[2][0].rgb
#define dvd_MatDiffuse     dvd_Matrices[dvd_drawID]._matrix[2][1]
#define dvd_MatSpecular    dvd_Matrices[dvd_drawID]._matrix[2][2].rgb
#define dvd_MatEmissive    dvd_Matrices[dvd_drawID]._matrix[2][3].rgb
#define dvd_MatShininess   dvd_Matrices[dvd_drawID]._matrix[2][3].w

#endif

#endif //_NODE_BUFFERED_INPUT_CMN_
