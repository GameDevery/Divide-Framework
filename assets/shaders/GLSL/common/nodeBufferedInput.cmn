#ifndef _NODE_BUFFERED_INPUT_CMN_
#define _NODE_BUFFERED_INPUT_CMN_

#include "nodeDataDefinition.cmn"

#if defined(OVERRIDE_DATA_IDX)
uniform uint DATA_IDX = 0u;
#else
#define DATA_IDX VAR.dvd_baseInstance
#endif

layout(binding = BUFFER_NODE_INFO, std430) coherent readonly buffer dvd_MatrixBlock
{
    NodeData dvd_Matrices[MAX_VISIBLE_NODES];
};

#define dvd_boneCount(nodeData) uint(nodeData._normalMatrixW[0][3])
#define dvd_lodLevel(nodeData) int(nodeData._colourMatrix[3].z)

#define dvd_reserved1(nodeData) uint(nodeData._prevWorldMatrix[2][3])
#define dvd_reseverd2(nodeData) uint(nodeData._prevWorldMatrix[3][3])

#define buffer_matProperties dvd_Matrices[DATA_IDX]._colourMatrix[3]

#define dvd_parallaxFactor  buffer_matProperties.y
#define dvd_dataFlag int(buffer_matProperties.w)

#if defined(FRAG_SHADER)
#define dvd_receivesShadow(nodeData) (int(nodeData._colourMatrix[2][3]) != 0)

uint dvd_texOperation = 0;
uint dvd_bumpMethod = 0;
void prepareData(in NodeData data) {
    dvd_texOperation = uint(data._prevWorldMatrix[0][3]);
    dvd_bumpMethod = uint(data._prevWorldMatrix[1][3]);
}
#endif

#endif //_NODE_BUFFERED_INPUT_CMN_
