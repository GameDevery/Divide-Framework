#ifndef _NODE_BUFFERED_INPUT_CMN_
#define _NODE_BUFFERED_INPUT_CMN_

#if defined(PRE_PASS) || defined(SHADOW_PASS)
#define DEPTH_PASS
#endif

struct NodeData {
    mat4 _worldMatrix;
    // [0][0] ... [2][2] = normal matrix
    // [0][3] = bone count
    // [1][3] = reflection index
    // [2][3] = refraction index
    // [3][0] ... [3][3] = bounding sphere
    mat4 _normalMatrixW;
    // [0][0] ... [0][3] = base colour (PBR) / albedo (Phong)
    // [1][0] ... [1][3] = metallic, specular, roughness, unused (PBR) / specular, shininess (Phong)
    // [2][0] ... [2][2] = emissive
    // [2][3] = unused;
    // [3][0] = texture operation
    // [3][1] = parallax factor
    // [3][2] = lod level
    // [3][3] = occlusion cull flag (if negative - no culling. use value for something else. if positive - cull)
    mat4 _colourMatrix;

    //Temp. w - unused
    vec4 _bbHalfExtents;
};

layout(binding = BUFFER_NODE_INFO, std430) coherent readonly buffer dvd_MatrixBlock
{
    NodeData dvd_Matrices[MAX_VISIBLE_NODES];
};

#define dvd_WorldMatrix(index) dvd_Matrices[index]._worldMatrix
#define dvd_NormalMatrixW(index) mat3(dvd_Matrices[index]._normalMatrixW)
#define dvd_NormalMatrixWV(index) (mat3(dvd_ViewMatrix) * dvd_NormalMatrixW(index))

#if defined(OVERRIDE_DATA_IDX)
uniform uint dvd_dataIdx = 0u;
#define DATA_IDX dvd_dataIdx
#else
#   if !defined(DATA_IDX)
#       define DATA_IDX VAR.dvd_baseInstance
#   endif
#endif
#if defined(VERT_SHADER)
#define dvd_boneCount     uint(dvd_Matrices[DATA_IDX]._normalMatrixW[0][3])
#endif

// x - reserved; y - parallax/relief mapping factor, z - lod level, w - data
#define buffer_matProperties dvd_Matrices[DATA_IDX]._colourMatrix[3]

// x - isSelected/isHighlighted; y - isShadowMapped; z - lodLevel, w - occlusion cull flag
#define dvd_lodLevel int(buffer_matProperties.z)
#define dvd_dataFlag int(buffer_matProperties.w)

#if defined(FRAG_SHADER)
#define dvd_parallaxFactor  buffer_matProperties.y
#define dvd_reliefFactor    dvd_parallaxFactor
#define dvd_reflectionIndex uint(dvd_Matrices[DATA_IDX]._normalMatrixW[1][3])
#define dvd_refractionIndex uint(dvd_Matrices[DATA_IDX]._normalMatrixW[2][3])

#endif

#endif //_NODE_BUFFERED_INPUT_CMN_
