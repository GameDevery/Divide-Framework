#ifndef _NODE_BUFFERED_INPUT_CMN_
#define _NODE_BUFFERED_INPUT_CMN_

//Ref: https://github.com/urho3d/Urho3D/blob/master/bin/CoreData/Shaders/GLSL/PBRLitSolid.glsl
#include "nodeDataDefinition.cmn"

#if defined(VERT_SHADER)
#if defined(OVERRIDE_DATA_IDX)
uniform uint INDIRECT_DATA_IDX;
#else //OVERRIDE_DATA_IDX
#define INDIRECT_DATA_IDX (DVD_GL_BASE_INSTANCE - 1u)
#endif //OVERRIDE_DATA_IDX

layout(binding = BUFFER_NODE_INDIRECTION_DATA, std430) coherent ACCESS_R buffer dvd_IndirectionBlock
{
    NodeIndirectionData dvd_IndirectionData[];
};

#define ComputeIndirectionData() \
const NodeIndirectionData indirectionData = dvd_IndirectionData[INDIRECT_DATA_IDX]; \
VAR._indirectionIDs = uvec4(indirectionData._transformIdx, indirectionData._materialIdx, indirectionData._texturesIdx, indirectionData._padding); \

#endif //VERT_SHADER

#if !defined(FRAG_SHADER)
layout(binding = BUFFER_NODE_TRANSFORM_DATA, std430) coherent ACCESS_R buffer dvd_TransformBlock
{
    NodeTransformData dvd_Transforms[];
};
#endif //!FRAG_SHADER

#if defined(FRAG_SHADER) || defined(NEED_MATERIAL_DATA)
layout(binding = BUFFER_NODE_MATERIAL_DATA, std430) coherent ACCESS_R buffer dvd_MaterialBlock 
{
    NodeMaterialData dvd_Materials[];
};

layout(binding = BUFFER_NODE_TEXTURE_DATA, std430) coherent ACCESS_R buffer dvd_textureBlock
{
    NodeTextureData dvd_Textures[];
};

#if defined(USE_BINDLESS_TEXTURES)
#define texDiffuse0   samplerUnit0(dvd_Textures[TEXTURE_IDX]._textures[0].xy)
#define texOpacityMap samplerOpacity(dvd_Textures[TEXTURE_IDX]._textures[0].zw)
#define texNormalMap  samplerNormal(dvd_Textures[TEXTURE_IDX]._textures[3].xy)
#define texHeight     samplerHeight(dvd_Textures[TEXTURE_IDX]._textures[2].xy)
#define texSpecular   samplerSpecular(dvd_Textures[TEXTURE_IDX]._textures[1].zw)
#define texMetalness  samplerMetalness(dvd_Textures[TEXTURE_IDX]._textures[1].zw)
#define texRoughness  samplerRoughness(dvd_Textures[TEXTURE_IDX]._textures[1].zw)
#define texOcclusion  samplerOcclusion(dvd_Textures[TEXTURE_IDX]._textures[1].zw)
#define texEmissive   samplerEmissive(dvd_Textures[TEXTURE_IDX]._textures[1].zw)
#define texDiffuse1   samplerUnit1(dvd_Textures[TEXTURE_IDX]._textures[1].xy)
#define texProjected  samplerProj(dvd_Textures[TEXTURE_IDX]._textures[2].zw)
#define texReflect    samplerReflect(dvd_Textures[TEXTURE_IDX]._textures[3].zw)
#define texRefract    samplerRefract(dvd_Textures[TEXTURE_IDX]._textures[4].xy)
#else //USE_BINDLESS_TEXTURES
layout(binding = TEXTURE_UNIT0)      uniform samplerUnit0 texDiffuse0;
layout(binding = TEXTURE_OPACITY)    uniform samplerOpacity texOpacityMap;
layout(binding = TEXTURE_NORMALMAP)  uniform samplerNormal texNormalMap;
layout(binding = TEXTURE_HEIGHTMAP)  uniform samplerHeight texHeight;
layout(binding = TEXTURE_SPECULAR)   uniform samplerSpecular texSpecular;
layout(binding = TEXTURE_METALNESS)  uniform samplerMetalness texMetalness;
layout(binding = TEXTURE_ROUGHNESS)  uniform samplerRoughness texRoughness;
layout(binding = TEXTURE_OCCLUSION)  uniform samplerOcclusion texOcclusion;
layout(binding = TEXTURE_EMISSIVE)   uniform samplerEmissive texEmissive;
layout(binding = TEXTURE_UNIT1)      uniform samplerUnit1 texDiffuse1;
layout(binding = TEXTURE_PROJECTION) uniform samplerProj texProjected;
layout(binding = TEXTURE_REFLECTION) uniform samplerReflect texReflect;
layout(binding = TEXTURE_REFRACTION) uniform samplerRefract texRefract;
#endif //USE_BINDLESS_TEXTURES

#endif //FRAG_SHADER || NEED_MATERIAL_DATA

#include "sceneData.cmn"

#endif //_NODE_BUFFERED_INPUT_CMN_
