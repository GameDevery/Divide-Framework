#ifndef _NODE_BUFFERED_INPUT_CMN_
#define _NODE_BUFFERED_INPUT_CMN_

//Ref: https://github.com/urho3d/Urho3D/blob/master/bin/CoreData/Shaders/GLSL/PBRLitSolid.glsl
#include "nodeDataDefinition.cmn"

DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_BATCH_SET, BUFFER_NODE_TRANSFORM_DATA, std430) coherent ACCESS_R buffer dvd_TransformBlock
{
    NodeTransformData dvd_Transforms[];
};

#if defined(VERT_SHADER)
#if defined(OVERRIDE_DATA_IDX)
uniform uint INDIRECT_DATA_IDX;
#else //OVERRIDE_DATA_IDX
#define INDIRECT_DATA_IDX (DVD_GL_BASE_INSTANCE - 1u)
#endif //OVERRIDE_DATA_IDX

DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_BATCH_SET, BUFFER_NODE_INDIRECTION_DATA, std430) coherent ACCESS_R buffer dvd_IndirectionBlock
{
    NodeIndirectionData dvd_IndirectionData[];
};

void ComputeIndirectionData() {
    const NodeIndirectionData indirectionData = dvd_IndirectionData[INDIRECT_DATA_IDX];
    TRANSFORM_IDX = indirectionData._transformIdx;
    MATERIAL_IDX = indirectionData._materialIdx;
    TEXTURE_IDX = indirectionData._texturesIdx * MATERIAL_TEXTURE_COUNT;
    SELECTION_FLAG = dvd_SelectionFlag(dvd_Transforms[TRANSFORM_IDX]);
}

#endif //VERT_SHADER

#if !defined(NEED_TEXTURE_DATA) && defined(FRAG_SHADER)
#define NEED_TEXTURE_DATA
#endif //!NEED_TEXTURE_DATA && FRAG_SHADER

#if defined(FRAG_SHADER)
DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_BATCH_SET, BUFFER_NODE_MATERIAL_DATA, std430) coherent ACCESS_R buffer dvd_MaterialBlock
{
    NodeMaterialData dvd_Materials[];
};
#endif //FRAG_SHADER

#if defined(NEED_TEXTURE_DATA)
#if defined(BINDLESS_TEXTURES_ENABLED)
DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_BATCH_SET, BUFFER_NODE_TEXTURE_DATA, std430) coherent ACCESS_R buffer dvd_textureBlock
{
    uvec2 dvd_Textures[];
};
#endif //BINDLESS_TEXTURES_ENABLED

#if defined(BINDLESS_TEXTURES_ENABLED)

#define texDiffuse0 sampler2DArray(dvd_Textures[TEXTURE_IDX + 0])
#define texOpacityMap sampler2DArray(dvd_Textures[TEXTURE_IDX + 1])
#define texNormalMap sampler2DArray(dvd_Textures[TEXTURE_IDX + 2])
#define texHeight sampler2DArray(dvd_Textures[TEXTURE_IDX + 3])
#define texSpecular sampler2DArray(dvd_Textures[TEXTURE_IDX + 4])
#define texMetalness sampler2DArray(dvd_Textures[TEXTURE_IDX + 5])
#define texRoughness sampler2DArray(dvd_Textures[TEXTURE_IDX + 6])
#define texOcclusion sampler2DArray(dvd_Textures[TEXTURE_IDX + 7])
#define texEmissive sampler2DArray(dvd_Textures[TEXTURE_IDX + 8])
#define texDiffuse1 sampler2DArray(dvd_Textures[TEXTURE_IDX + 9])
#define texProjected sampler2DArray(dvd_Textures[TEXTURE_IDX + 10])
#define texReflectPlanar sampler2D(dvd_Textures[TEXTURE_IDX + 11])
#define texRefractPlanar sampler2D(dvd_Textures[TEXTURE_IDX + 12])
#define texReflectCube sampler2DCube(dvd_Textures[TEXTURE_IDX + 13])
#define texRefractCube sampler2DCube(dvd_Textures[TEXTURE_IDX + 14])

#else //BINDLESS_TEXTURES_ENABLED

DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_UNIT0)             uniform sampler2DArray texDiffuse0;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_OPACITY)           uniform sampler2DArray texOpacityMap;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_NORMALMAP)         uniform sampler2DArray texNormalMap;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_HEIGHTMAP)         uniform sampler2DArray texHeight;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_SPECULAR)          uniform sampler2DArray texSpecular;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_METALNESS)         uniform sampler2DArray texMetalness;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_ROUGHNESS)         uniform sampler2DArray texRoughness;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_OCCLUSION)         uniform sampler2DArray texOcclusion;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_EMISSIVE)          uniform sampler2DArray texEmissive;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_UNIT1)             uniform sampler2DArray texDiffuse1;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_PROJECTION)        uniform sampler2DArray texProjected;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_REFLECTION_PLANAR) uniform sampler2D      texReflectPlanar;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_REFRACTION_PLANAR) uniform sampler2D      texRefractPlanar;
DESCRIPTOR_SET_RESOURCE(PER_DRAW_SET, TEXTURE_REFLECTION_CUBE)   uniform samplerCube    texReflectCube;

#endif //BINDLESS_TEXTURES_ENABLED

#endif //NEED_TEXTURE_DATA

#include "sceneData.cmn"

#endif //_NODE_BUFFERED_INPUT_CMN_
