#ifndef _NODE_DATA_DEFINITION_CMN_
#define _NODE_DATA_DEFINITION_CMN_

#if defined(USE_SHADING_COOK_TORRANCE) || defined(USE_SHADING_OREN_NAYAR)
#define PBR_SHADING
#endif

struct NodeData {
    mat4 _worldMatrix;

    // [0...2][0...2] = normal matrix
    // [3][0...2]     = bounds center
    // [0][3]         = 4x8U: bone count, lod level, tex op, bump method
    // [1][3]         = 2x16F: BBox HalfExtent (X, Y) 
    // [2][3]         = 2x16F: BBox HalfExtent (Z), BSphere Radius
    // [3][3]         = 2x16F: (Data Flag, reserved)
    mat4 _normalMatrixW;

    // [0][0...3] = base colour
    // [1][0]     = 4x8U: occlusion, metallic, roughness, reserved
    // [1][1]     = IBL texture size
    // [1][2..3]  = reserved
    // [2][0...2] = emissive
    // [2][3]     = parallax factor
    // [3][0...2] = reserved
    mat4 _colourMatrix;

    // [0...3][0...2] = previous world matrix
    // [0][3]         = 4x8U: animation ticked this frame (for motion blur), occlusion cull, reserved, reserved
    // [1][3]         = reserved
    // [2][3]         = reserved
    // [3][3]         = reserved
    mat4 _prevWorldMatrix;
};


#define PACKED_OMR(colourMat) unpackUnorm4x8(uint(colourMat[1][0]))

#define BaseColour(colourMat) colourMat[0].rgba

#define EmissiveColour(colourMat) colourMat[2].rgb

#define Occlusion(colourMat) PACKED_OMR(colourMat).r

#define Metallic(colourMat) PACKED_OMR(colourMat).g

#define Roughness(colourMat) PACKED_OMR(colourMat).b

#define IBLSize(colourMat) uint(colourMat[1][1])

#define NormalMatrixW(nodeData) mat3(nodeData._normalMatrixW)

#define dvd_boneCount(nodeData) uint(unpackUnorm4x8(uint(nodeData._normalMatrixW[0][3])).x * 255)

#define dvd_lodLevel(nodeData)  uint(unpackUnorm4x8(uint(nodeData._normalMatrixW[0][3])).y * 255)

#define dvd_texOperation(nodeData) uint(unpackUnorm4x8(uint(nodeData._normalMatrixW[0][3])).z * 255)

#define dvd_bumpMethod(nodeData)  uint(unpackUnorm4x8(uint(nodeData._normalMatrixW[0][3])).w * 255)

#define dvd_frameTicked(nodeData) (uint(unpackUnorm4x8(uint(nodeData._prevWorldMatrix[0][3])).x  * 255) == 1)

#define dvd_cullNode(nodeData) (uint(unpackUnorm4x8(uint(nodeData._prevWorldMatrix[0][3])).y * 255) == 1)

#define dvd_parallaxFactor(X)  dvd_Matrices[X]._colourMatrix[2][3]

#define dvd_dataFlag(X) unpackHalf2x16(uint(dvd_Matrices[X]._normalMatrixW[3][3])).x

#endif //_NODE_DATA_DEFINITION_CMN_
