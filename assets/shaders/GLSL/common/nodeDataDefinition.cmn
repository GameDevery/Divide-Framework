#ifndef _NODE_DATA_DEFINITION_CMN_
#define _NODE_DATA_DEFINITION_CMN_

#if defined(SAMPLER_UNIT0_IS_ARRAY)
#define samplerUnit0 sampler2DArray
#else //SAMPLER_UNIT0_IS_ARRAY
#define samplerUnit0 sampler2D
#endif //SAMPLER_UNIT0_IS_ARRAY
#if defined(SAMPLER_OPACITY_IS_ARRAY)
#define samplerOpacity sampler2DArray
#else //SAMPLER_OPACITY_IS_ARRAY
#define samplerOpacity sampler2D
#endif //SAMPLER_OPACITY_IS_ARRAY
#if defined(SAMPLER_UNIT1_IS_ARRAY)
#define samplerUnit1 sampler2DArray
#else //SAMPLER_UNIT1_IS_ARRAY
#define samplerUnit1 sampler2D
#endif //SAMPLER_UNIT1_IS_ARRAY
#if defined(SAMPLER_OCCLUSION_METALLIC_ROUGHNESS_IS_ARRAY)
#define samplerOMR sampler2DArray
#else //SAMPLER_OCCLUSION_METALLIC_ROUGHNESS_IS_ARRAY
#define samplerOMR sampler2D
#endif //SAMPLER_OCCLUSION_METALLIC_ROUGHNESS_IS_ARRAY
#if defined(SAMPLER_HEIGHTMAP_IS_ARRAY)
#define samplerHeight sampler2DArray
#else //SAMPLER_HEIGHTMAP_IS_ARRAY
#define samplerHeight sampler2D
#endif //SAMPLER_HEIGHTMAP_IS_ARRAY
#if defined(SAMPLER_PROJECTION_IS_ARRAY)
#define samplerProj sampler2DArray
#else //SAMPLER_PROJECTION_IS_ARRAY
#define samplerProj sampler2D
#endif //SAMPLER_PROJECTION_IS_ARRAY
#if defined(SAMPLER_NORMALMAP_IS_ARRAY)
#define samplerNormal sampler2DArray
#else //SAMPLER_NORMALMAP_IS_ARRAY
#define samplerNormal sampler2D
#endif //SAMPLER_NORMALMAP_IS_ARRAY

struct NodeTransformData {
    mat4 _worldMatrix;

    // [0...2][0...2] = normal matrix
    // [3][0...2]     = bounds center
    // [0][3]         = 4x8U: bone count, lod level, reserved, reserved
    // [1][3]         = 2x16F: BBox HalfExtent (X, Y) 
    // [2][3]         = 2x16F: BBox HalfExtent (Z), BSphere Radius
    // [3][3]         = 2x16F: (Data Flag, reserved)
    mat4 _normalMatrixW;

    // [0...3][0...2] = previous world matrix
    // [0][3]         = 4x8U: animation ticked this frame (for motion blur), occlusion cull, reserved, reserved
    // [1][3]         = reserved
    // [2][3]         = reserved
    // [3][3]         = reserved
    mat4 _prevWorldMatrix;
};

#if defined(FRAG_SHADER) || defined(NEED_MATERIAL_DATA)

struct NodeMaterialData
{
    //base colour
    vec4 _albedo;
    //rgb - emissive, 
    //a   - parallax factor
    vec4 _emissiveAndParallax;
    //x = 4x8U: occlusion, metallic, roughness, reserved
    //y = IBL texture size
    //z = 4x8U: tex op, bump method, reserved, reserved
    //w = Probe lookup index + 1 (0 = sky cubemap)
    uvec4 _data;

    //TextureData
    uvec4 _textures[(MATERIAL_TEXTURE_COUNT + 1) / 2];
};

#define PACKED_OMR(materialData) unpackUnorm4x8(materialData._data.x)

#define BaseColour(materialData) materialData._albedo

#define EmissiveColour(materialData) materialData._emissiveAndParallax.rgb

#define Occlusion(materialData) PACKED_OMR(materialData).r

#define Metallic(materialData) PACKED_OMR(materialData).g

#define Roughness(materialData) PACKED_OMR(materialData).b

#define IBLSize(materialData) materialData._data.y

#define dvd_probeIndex(materialData) materialData._data.w

#define dvd_texOperation(materialData) uint(unpackUnorm4x8(materialData._data.z).x * 255)

#define dvd_bumpMethod(X)  uint(unpackUnorm4x8(dvd_Materials[X]._data.z).y * 255)

#define dvd_parallaxFactor(X)  dvd_Materials[X]._emissiveAndParallax.a

#endif //FRAG_SHADER || NEED_MATERIAL_DATA

#define NormalMatrixW(transformData) mat3(transformData._normalMatrixW)

#define dvd_boneCount(transformData) uint(unpackUnorm4x8(uint(transformData._normalMatrixW[0][3])).x * 255)

#define dvd_lodLevel(transformData)  uint(unpackUnorm4x8(uint(transformData._normalMatrixW[0][3])).y * 255)

#define dvd_dataFlag(X) unpackHalf2x16(uint(dvd_Transforms[X]._normalMatrixW[3][3])).x

#define dvd_frameTicked(transformData) (uint(unpackUnorm4x8(uint(transformData._prevWorldMatrix[0][3])).x  * 255) == 1)

#define dvd_cullNode(transformData) (uint(unpackUnorm4x8(uint(transformData._prevWorldMatrix[0][3])).y * 255) == 1)


#endif //_NODE_DATA_DEFINITION_CMN_
