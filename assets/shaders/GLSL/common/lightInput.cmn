#ifndef _LIGHT_INPUT_CMN_
#define _LIGHT_INPUT_CMN_

#if defined(FRAG_SHADER)

const int LIGHT_DIRECTIONAL = 0;
const int LIGHT_OMNIDIRECTIONAL = 1;
const int LIGHT_SPOT = 2;

struct Light {
    vec4   _color;       //< rgb = color,  w = ambientCoef;
    vec4   _attenuation; //< x = constAtt, y = linearAtt, z = quadraticAtt,  w = brightness
    vec4   _position;    //< xyz = Position is a direction for directional lights; w = spot cutoff
    vec4   _direction;   //< xyz = Used by spot lights, w = spotExponent
    ivec4  _options;     //< x = light type: 0.0 - directional, 1.0  - point, 2.0 - spot, y = casts shadows, z = shadow block index, w = reserved
};

layout(binding = BUFFER_LIGHT_NORMAL, std430) coherent readonly buffer dvd_LightBlock
//layout(binding = BUFFER_LIGHT_NORMAL, std140) uniform dvd_LightBlock
{
    Light dvd_LightSource[MAX_LIGHTS_IN_VIEW];
};

struct Shadow {
    mat4  _lightVP[MAX_SPLITS_PER_LIGHT];
    vec4  _floatValues;
    vec4  _lightPosition[MAX_SPLITS_PER_LIGHT];
};


layout(binding = BUFFER_LIGHT_SHADOW, std140) uniform dvd_ShadowBlock
{
    Shadow dvd_ShadowSource[MAX_SHADOW_CASTING_LIGHTS];
}; 

uniform vec3 dvd_lightAmbient;
#endif

uniform uint dvd_lightCount = 0;

VARYING vec3 _normalWV;
#if defined(COMPUTE_TBN)
VARYING vec3 _tangentWV;
VARYING vec3 _bitangentWV;
#endif

VARYING vec3 _viewDirection;
flat VARYING uint _lightCount;

#endif //_LIGHT_INPUT_CMN_