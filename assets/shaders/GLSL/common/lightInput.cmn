#ifndef _LIGHT_INPUT_CMN_
#define _LIGHT_INPUT_CMN_

#include "nodeDataInput.cmn"

const int LIGHT_DIRECTIONAL = 0;
const int LIGHT_OMNIDIRECTIONAL = 1;
const int LIGHT_SPOT = 2;
const int LIGHT_NONE = 3;

struct Light {
    /// rgb = colour
    /// w = cos(outer cone angle)
    vec4   _colour;
    /// xyz = light position (spot and omni. 0,0,0 for directional)
    /// w = range (radius for point lights)
    vec4   _positionWV; 
    /// xyz = direction (spot and directional, 0,0,0 for omni)
    /// w = cos(inner cone angle)
    vec4   _directionWV; 
    /// x = light type: 0 - directional, 1  - point, 2 - spot, 3 - none
    /// y = shadow index (-1 = no shadows)
    /// z = spot cone slant height
    /// w = reserved
    ivec4  _options;
};

#define _TYPE _options.x
#define _SHADOW_INDEX _options.y
#define _SPOT_CONE_SLANT_HEIGHT _options.z

DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_PASS, 9, std430) coherent ACCESS_R buffer dvd_LightBlock
{
    Light dvd_LightSource[];
    //RenderDoc: vec3 colour; float cosOuterCone; vec3 positionWV; float range; vec3 directionWV; float spotAngle; int lightType; int castsShadows; ivec2 null;
};

vec4 getPositionAndRangeForLight(in Light source) {
    vec4 returnValue = vec4(0.f);

    if (source._TYPE == LIGHT_SPOT) {
        returnValue.w = source._SPOT_CONE_SLANT_HEIGHT * 0.5f;//range to radius conversion
        returnValue.xyz = source._positionWV.xyz + (source._directionWV.xyz * returnValue.w);
    } else if (source._TYPE == LIGHT_OMNIDIRECTIONAL) {
        returnValue = source._positionWV;
    } else {
        returnValue = vec4(source._directionWV.xyz * source._positionWV.w * -1.f, 2.f);
    }

    return returnValue;
}

DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_PASS, 8, std140) uniform dvd_LightSceneDataBlock
{
    // x = directional light count, y = point light count, z = spot light count, w = unused
    uvec4 dvd_LightData;
    vec4  dvd_AmbientColour;
    mat4 _light_padding0[3]; 
    vec4 _light_padding1[2];
};

#define DIRECTIONAL_LIGHT_COUNT dvd_LightData.x
#define POINT_LIGHT_COUNT       dvd_LightData.y
#define SPOT_LIGHT_COUNT        dvd_LightData.z

#if defined(FRAG_SHADER) || defined(COMPUTE_SHADER)
DESCRIPTOR_SET_RESOURCE_LAYOUT( PER_PASS, 10, std430 ) COMP_ONLY_W buffer lightIndexSSBO
{
    uint globalLightIndexList[];
};

DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_PASS, 11, std430)  COMP_ONLY_W buffer lightGridSSBO
{
    uvec4 lightGrid[CLUSTERS_X * CLUSTERS_Y * CLUSTERS_Z];
};

#define LightGrid uvec4
#define _offset x
#define _countPoint y
#define _countSpot z
#define _unused w

struct VolumeTileAABB
{
    vec4 minPoint;
    vec4 maxPoint;
};

#if !defined(COMPUTE_SHADER)

// cluster depth index from depth in screen coordinates (gl_FragCoord.z)
uint GetClusterZIndex(in float screenDepth)
{
    const float eyeDepth = ToLinearDepth(screenDepth, dvd_ZPlanes);
    
    return uint( max( log( eyeDepth ) * dvd_LightScale + dvd_LightBias, 0.f ) );
}

uint GetClusterIndex(in vec4 fragCoord) {
    const uint zIndex = GetClusterZIndex(fragCoord.z);
    const uvec3 indices = uvec3(uvec2(fragCoord.xy / dvd_ClusterSizes), zIndex);
    return (CLUSTERS_X * CLUSTERS_Y) * indices.z +
            CLUSTERS_X * indices.y +
            indices.x;
}

#else //COMPUTE_SHADER
DESCRIPTOR_SET_RESOURCE_LAYOUT( PER_DRAW, 0, std430 ) COMP_ONLY_W buffer globalIndexCountSSBO
{
    uint globalIndexCount[];
};

DESCRIPTOR_SET_RESOURCE_LAYOUT( PER_DRAW, 1, std430 ) COMP_ONLY_RW buffer lightClusterAABBsBuffer
{
    VolumeTileAABB lightClusterAABBs[CLUSTERS_X * CLUSTERS_Y * CLUSTERS_Z];
};
#endif //COMPUTE_SHADER

#endif //FRAG_SHADER || COMPUTE_SHADER

#endif //_LIGHT_INPUT_CMN_
