#if defined(FRAG_SHADER)

const int LIGHT_DIRECTIONAL = 0;
const int LIGHT_OMNIDIRECTIONAL = 1;
const int LIGHT_SPOT = 2;

struct Light {
    vec4   _diffuse;     //< rgb = diffuse,  w = ambientFactor;
    vec4   _specular;    //< rgb = specular color, w = spot cutoff
    vec4   _attenuation; //< x = constAtt, y = linearAtt, z = quadraticAtt,  w = brightness
    vec4   _position;    //< Position is a direction for directional lights. w-light type: 0.0 - directional, 1.0  - point, 2.0 - spot
    vec4   _direction;   //< xyz = Used by spot lights, w = spotExponent
    ivec4  _options;     //< x = casts shadows, yzw = reserved
};

layout(binding = SHADER_BUFFER_LIGHT_NORMAL, std140) uniform dvd_LightBlock
{
    Light dvd_LightSource[MAX_LIGHTS_PER_SCENE];
};

struct Shadow {
    mat4  _lightVP0;
    mat4  _lightVP1;
    mat4  _lightVP2;
    mat4  _lightVP3;
    vec4  _floatValues;
    vec4  _lightPosition[4];
};

layout(binding = SHADER_BUFFER_LIGHT_SHADOW, std140) uniform dvd_ShadowBlock
{
    Shadow dvd_ShadowSource[MAX_LIGHTS_PER_SCENE];
}; 

uniform vec3 dvd_lightAmbient;
#endif

VARYING vec3 _normalWV;
#if defined(COMPUTE_TBN)
VARYING vec3 _tangentWV;
VARYING vec3 _bitangentWV;
#endif
VARYING vec3 _viewDirection;
flat VARYING uint _lightCount;