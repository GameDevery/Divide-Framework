#ifndef _LIGHT_INPUT_CMN_
#define _LIGHT_INPUT_CMN_

#if defined(COMPUTE_SHADER)
#   define ACCESS
#else
#   define ACCESS readonly
#endif

const int LIGHT_DIRECTIONAL = 0;
const int LIGHT_OMNIDIRECTIONAL = 1;
const int LIGHT_SPOT = 2;

struct Light {
    /// rgb = color
    /// w = reserved
    vec4   _color;
    /// xyz = light positoon (or direction for Directional lights)
    /// w = range
    vec4   _positionWV; 
    /// xyz = spot direction
    /// w = spot angle   
    vec4   _directionWV;
    /// x = light type: 0.0 - directional, 1.0  - point, 2.0 - spot
    /// y = casts shadows
    /// z = shadow block index
    /// w = reserved
    ivec4  _options;
};

layout(binding = BUFFER_LIGHT_NORMAL, std430) coherent ACCESS buffer dvd_LightBlock
{
    Light dvd_LightSource[MAX_POSSIBLE_LIGHTS];
};

#if defined(COMPUTE_SHADER)
layout(binding = BUFFER_LIGHT_INDICES, std430) coherent ACCESS buffer perTileLightIndexBuffer
{
    uint perTileLightIndexBufferOut[];
};
#endif

#if defined(FRAG_SHADER)
struct Shadow {
    uvec4 _arrayOffset;
    mat4  _lightVP[MAX_SPLITS_PER_LIGHT];
    vec4  _lightPosition[MAX_SPLITS_PER_LIGHT];
    vec4  _floatValues[MAX_SPLITS_PER_LIGHT];
};

layout(binding = BUFFER_LIGHT_SHADOW, std430) coherent ACCESS buffer dvd_ShadowBlock
{
    Shadow dvd_ShadowSource[MAX_SHADOW_CASTING_LIGHTS];
};
#endif

#endif //_LIGHT_INPUT_CMN_