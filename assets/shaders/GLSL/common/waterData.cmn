#ifndef _WATER_DATA_CMN_
#define _WATER_DATA_CMN_

#if defined(FRAG_SHADER) || defined(NEED_SCENE_DATA)

#include "sceneData.cmn"

bool IsUnderWater(in vec3 vertexW) {
    for (int i = 0; i < GLOBAL_WATER_BODIES_COUNT; ++i)
    {
        WaterBodyData data = dvd_waterEntities[0];
        const vec3 extents = data.extents.xyz;
        const vec3 position = data.positionW.xyz;
        
        const float halfWidth  = (extents.x + position.x) * 0.5f;
        const float halfLength = (extents.z + position.z) * 0.5f;
        if (vertexW.x >= -halfWidth && vertexW.x <= halfWidth &&
            vertexW.z >= -halfLength && vertexW.z <= halfLength)
        {
            const float depth = position.y - extents.y;
            if (vertexW.y < position.y && vertexW.y > depth) {
                return true;
            }
        }
    }

    return false;
}

vec2 GetWaterDetails(in vec3 vertexW, in float maxDepth) {

    float maxDistance = 0.0f;
    float minDepth = 1.0f;

    for (int i = 0; i < GLOBAL_WATER_BODIES_COUNT; ++i)
    {
        WaterBodyData data = dvd_waterEntities[i];

        const vec3 extents = data.extents.xyz;
        const vec3 position = data.positionW.xyz;

        const float halfWidth = (extents.x + position.x) * 0.5f;
        const float halfLength = (extents.z + position.z) * 0.5f;
        if (vertexW.x >= -halfWidth  && vertexW.x <= halfWidth &&
            vertexW.z >= -halfLength && vertexW.z <= halfLength)
        {
            const float depth = min(maxDepth, -extents.y);

            // Distance
            maxDistance = max(maxDistance, 1.0f - smoothstep(position.y - 0.05f, position.y + 0.05f, vertexW.y));


            // Current water depth in relation to the minimum possible depth
            minDepth = min(minDepth, Saturate(1.0f - (position.y - vertexW.y) / (position.y - maxDepth)));
        }
    }

    return Saturate(vec2(maxDistance, minDepth));
}
#endif //FRAG_SHADER || NEED_SCENE_DATA
#endif //_WATER_DATA_CMN_
