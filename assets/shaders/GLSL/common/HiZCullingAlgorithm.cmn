#ifndef _HIZ_CULL_CMN_
#define _HIZ_CULL_CMN_

layout(binding = TEXTURE_UNIT0) uniform sampler2D HiZBuffer;

uniform float nearPlane;
uniform vec2 viewSize;
uniform mat4 viewMatrix;
uniform mat4 viewProjectionMatrix;
uniform vec4 frustumPlanes[6];

bool SphereInFrustum(vec3 pos, float r) {
    for (int i = 0; i < 6; i++) {
        if (dot(vec4(pos, 1.f), frustumPlanes[i]) < -r) {
            // sphere outside plane
            return false;
        }
    }
    return true;
}

vec4 getBoxCorner(in int n, in vec4 bboxMin, in vec4 bboxMax) {
    switch (n) {
        case 0: return vec4(bboxMin.x, bboxMin.y, bboxMin.z, 1);
        case 1: return vec4(bboxMax.x, bboxMin.y, bboxMin.z, 1);
        case 2: return vec4(bboxMin.x, bboxMax.y, bboxMin.z, 1);
        case 3: return vec4(bboxMax.x, bboxMax.y, bboxMin.z, 1);
        case 4: return vec4(bboxMin.x, bboxMin.y, bboxMax.z, 1);
        case 5: return vec4(bboxMax.x, bboxMin.y, bboxMax.z, 1);
        case 6: return vec4(bboxMin.x, bboxMax.y, bboxMax.z, 1);
        case 7: return vec4(bboxMax.x, bboxMax.y, bboxMax.z, 1);
    }
}

uint getCullBits(vec4 hPos) {
    uint cullBits = 0;
    cullBits |= hPos.x < -hPos.w ? 1 : 0;
    cullBits |= hPos.x >  hPos.w ? 2 : 0;
    cullBits |= hPos.y < -hPos.w ? 4 : 0;
    cullBits |= hPos.y >  hPos.w ? 8 : 0;
    cullBits |= hPos.z < -hPos.w ? 16 : 0;
    cullBits |= hPos.z >  hPos.w ? 32 : 0;
    cullBits |= hPos.w <= 0 ? 64 : 0;
    return cullBits;
}

vec3 projected(vec4 pos) {
    return pos.xyz / pos.w;
}

bool pixelCull(vec3 clipmin, vec3 clipmax) {
    const vec2 dim = (clipmax.xy - clipmin.xy) * 0.5f * viewSize;
    return  max(dim.x, dim.y) < 0.f;
}


bool HiZCull(const in vec3 position, const in vec3 hextents, const in float bSphereRadius) {
    // Basic frustum culling
    if (!SphereInFrustum(position, bSphereRadius)) {
        return true;
    }

    const vec3 viewCenter = (viewMatrix * vec4(position, 1.0)).xyz;
    const float nearestZ = viewCenter.z + bSphereRadius;
    // Sphere clips against near plane, just assume visibility.
    if (nearestZ >= -(nearPlane)) {
        return false;
    }

    const vec4 bboxMin = vec4(position - hextents, 1.0f);
    const vec4 bboxMax = vec4(position + hextents, 1.0f);

    // clipspace bbox
    vec4 hPos0 = viewProjectionMatrix * getBoxCorner(0, bboxMin, bboxMax);
    vec3 clipmin = projected(hPos0);
    vec3 clipmax = clipmin;
    uint clipbits = getCullBits(hPos0);

    for (int n = 1; n < 8; n++) {
        vec4 hPos = viewProjectionMatrix * getBoxCorner(n, bboxMin, bboxMax);
        vec3 ab = projected(hPos);
        clipmin = min(clipmin, ab);
        clipmax = max(clipmax, ab);
        clipbits &= getCullBits(hPos);
    }

    bool isVisible = (clipbits == 0 && !pixelCull(clipmin, clipmax));

    if (isVisible) {
        clipmin = clipmin * 0.5f + 0.5f;
        clipmax = clipmax * 0.5f + 0.5f;
        vec2 size = (clipmax.xy - clipmin.xy);
        ivec2 texsize = textureSize(HiZBuffer, 0);
        float maxsize = max(size.x, size.y) * float(max(texsize.x, texsize.y));
        float miplevel = ceil(log2(maxsize));

        float depth = 0.0f;
        float a = textureLod(HiZBuffer, clipmin.xy, miplevel).r;
        float b = textureLod(HiZBuffer, vec2(clipmax.x, clipmin.y), miplevel).r;
        float c = textureLod(HiZBuffer, clipmax.xy, miplevel).r;
        float d = textureLod(HiZBuffer, vec2(clipmin.x, clipmax.y), miplevel).r;
        depth = max(depth, max(max(max(a, b), c), d));

        isVisible = clipmin.z <= depth;
    }

    return !isVisible;
}

#endif //_HIZ_CULL_CMN_
