uniform float dvd_frustumBias = 0.5;
layout(binding = TEXTURE_UNIT0) uniform sampler2D HiZBuffer;

vec4 BoundingBox[8];
int PassThrough(const in vec3 position, const in vec3 extents) {
    return 1;
}

int InstanceCloudReduction(const in vec3 position, const in vec3 extents) {

    // create the bounding box of the object 
    BoundingBox[0] = dvd_ViewProjectionMatrix * vec4(position + vec3( extents.x,  extents.y,  extents.z), 1.0);
    BoundingBox[1] = dvd_ViewProjectionMatrix * vec4(position + vec3(-extents.x,  extents.y,  extents.z), 1.0);
    BoundingBox[2] = dvd_ViewProjectionMatrix * vec4(position + vec3( extents.x, -extents.y,  extents.z), 1.0);
    BoundingBox[3] = dvd_ViewProjectionMatrix * vec4(position + vec3(-extents.x, -extents.y,  extents.z), 1.0);
    BoundingBox[4] = dvd_ViewProjectionMatrix * vec4(position + vec3( extents.x,  extents.y, -extents.z), 1.0);
    BoundingBox[5] = dvd_ViewProjectionMatrix * vec4(position + vec3(-extents.x,  extents.y, -extents.z), 1.0);
    BoundingBox[6] = dvd_ViewProjectionMatrix * vec4(position + vec3( extents.x, -extents.y, -extents.z), 1.0);
    BoundingBox[7] = dvd_ViewProjectionMatrix * vec4(position + vec3(-extents.x, -extents.y, -extents.z), 1.0);

    // check how the bounding box resides regarding to the view frustum 
    uint outOfBound[6] = uint[6](0, 0, 0, 0, 0, 0);

    vec4 crtBB;
    float frustumLimit = 0.0;
    for (uint i = 0; i < 8; i++) {
        crtBB = BoundingBox[i];
        frustumLimit = crtBB.w + dvd_frustumBias;
        if (crtBB.x >  frustumLimit) outOfBound[0]++;
        if (crtBB.x < -frustumLimit) outOfBound[1]++;
        if (crtBB.y >  frustumLimit) outOfBound[2]++;
        if (crtBB.y < -frustumLimit) outOfBound[3]++;
        if (crtBB.z >  frustumLimit) outOfBound[4]++;
        if (crtBB.z < -frustumLimit) outOfBound[5]++;
    }

    return (outOfBound[0] == 8 || outOfBound[1] == 8 || outOfBound[2] == 8 ||
            outOfBound[3] == 8 || outOfBound[4] == 8 || outOfBound[5] == 8) ? 0 : 1;
}

//Return: 0 = culled, 1 = visible
int HiZOcclusionCull(const in vec3 position, const in vec3 extents) {
    /* first do instance cloud reduction */
    if (InstanceCloudReduction(position, extents) == 0) {
        return 0;
    }

    /* perform perspective division for the bounding box */
    BoundingBox[0].xyz /= BoundingBox[0].w;
    BoundingBox[1].xyz /= BoundingBox[1].w;
    BoundingBox[2].xyz /= BoundingBox[2].w;
    BoundingBox[3].xyz /= BoundingBox[3].w;
    BoundingBox[4].xyz /= BoundingBox[4].w;
    BoundingBox[5].xyz /= BoundingBox[5].w;
    BoundingBox[6].xyz /= BoundingBox[6].w;
    BoundingBox[7].xyz /= BoundingBox[7].w;

    /* calculate screen space bounding rectangle */
    vec2 BoundingRect[2];
    BoundingRect[0].x = min(min(min(BoundingBox[0].x, BoundingBox[1].x), min(BoundingBox[2].x, BoundingBox[3].x)),
                            min(min(BoundingBox[4].x, BoundingBox[5].x), min(BoundingBox[6].x, BoundingBox[7].x))) * 0.5 + 0.5;

    BoundingRect[0].y = min(min(min(BoundingBox[0].y, BoundingBox[1].y), min(BoundingBox[2].y, BoundingBox[3].y)),
                            min(min(BoundingBox[4].y, BoundingBox[5].y), min(BoundingBox[6].y, BoundingBox[7].y))) * 0.5 + 0.5;

    BoundingRect[1].x = max(max(max(BoundingBox[0].x, BoundingBox[1].x), max(BoundingBox[2].x, BoundingBox[3].x)),
                            max(max(BoundingBox[4].x, BoundingBox[5].x), max(BoundingBox[6].x, BoundingBox[7].x))) * 0.5 + 0.5;

    BoundingRect[1].y = max(max(max(BoundingBox[0].y, BoundingBox[1].y), max(BoundingBox[2].y, BoundingBox[3].y)),
                            max(max(BoundingBox[4].y, BoundingBox[5].y), max(BoundingBox[6].y, BoundingBox[7].y))) * 0.5 + 0.5;

    /* then the linear depth value of the front-most point */
    float InstanceDepth = min(min(min(BoundingBox[0].z, BoundingBox[1].z), min(BoundingBox[2].z, BoundingBox[3].z)),
                              min(min(BoundingBox[4].z, BoundingBox[5].z), min(BoundingBox[6].z, BoundingBox[7].z)));

    /* now we calculate the bounding rectangle size in viewport coordinates */
    /* now we calculate the texture LOD used for lookup in the depth buffer texture */
    float LOD = ceil(log2(max((BoundingRect[1].x - BoundingRect[0].x) * dvd_ViewPort.y,
                              (BoundingRect[1].y - BoundingRect[0].y) * dvd_ViewPort.z) / 2.0));

    /* finally fetch the depth texture using explicit LOD lookups */
    /* if the instance depth is bigger than the depth in the texture discard the instance */
    return (InstanceDepth > max(max(textureLod(HiZBuffer, vec2(BoundingRect[0].x, BoundingRect[0].y), LOD).r,
                                    textureLod(HiZBuffer, vec2(BoundingRect[0].x, BoundingRect[1].y), LOD).r),
                             max(textureLod(HiZBuffer, vec2(BoundingRect[1].x, BoundingRect[1].y), LOD).r,
                                 textureLod(HiZBuffer, vec2(BoundingRect[1].x, BoundingRect[0].y), LOD).r))) ? 0 : 1;
}