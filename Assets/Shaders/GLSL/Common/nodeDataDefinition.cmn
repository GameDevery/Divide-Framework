#ifndef _NODE_DATA_DEFINITION_CMN_
#define _NODE_DATA_DEFINITION_CMN_

#include "nodeDataInput.cmn"

#define _transformIdx x
#define _materialIdx y

#define TRANSFORM_IDX VAR._indirectionIDs._transformIdx
#define MATERIAL_IDX VAR._indirectionIDs._materialIdx
#define SELECTION_FLAG_NONE 0
#define SELECTION_FLAG_HOVERED 1
#define SELECTION_FLAG_PARENT_HOVERED 2
#define SELECTION_FLAG_SELECTED 3
#define SELECTION_FLAG_PARENT_SELECTED 4

struct NodeTransformData
{
    mat4 _worldMatrix;
    mat4 _prevWVPMatrix;
    //[0][0]...[2][2] - normalMatrix
    //[0][3] = 4x8U: unused, selection flag, LoDLevel, occlusion cull
    //[1][3] = animationFrameCurrent
    //[2][3] = boneCount
    //[3][0..3] = boundingSphere
    mat4 _normalMatrixW;
};

#define NodeIndirectionData uvec4

#if defined(FRAG_SHADER)

struct NodeMaterialData
{
    //base colour
    vec4 _albedo;
    //rgb - emissive
    //a   - parallax factor
    vec4 _emissiveAndParallax;
    //rgb - ambientColour (Don't really need this. To remove eventually, but since we have the space, might as well)
    //a - specular strength [0...Material::MAX_SHININESS]. Used mainly by Phong shading
    vec4 _colourData;
    //x = 4x8U: occlusion, metallic, roughness, isDoubleSided
    //y = 4x8U: specularR, specularG, specularB, use packed OMR
    //z = 4x8U: bump method, shadingMode, reserved, reserved
    //w = Probe lookup index + 1 (0 = sky cubemap)
    uvec4 _data;
    //x = 4x8U: tex op Unit0, tex op Unit1, tex op Specular, Emissive
    //y = 4x8U: tex op Occlusion, tex op Metalness, tex op Roughness, tex op Opcaity
    //z = 4x8U: use albedo texture alpha channel, use opacity map alpha channel, specular Factor, gloss Factor
    //w = 4x8u: receives shadows, reserved, reserved, reserved
    uvec4 _textureOperations;
};

#define dvd_BaseColour(materialData) materialData._albedo
#define dvd_EmissiveColour(materialData) materialData._emissiveAndParallax.rgb
#define dvd_Ambient(materialData) materialData._colourData.rgb
#define dvd_SpecularStrength(materialData) materialData._colourData.a

#define dvd_TexOperationsA(materialData) uvec4(unpackUnorm4x8(materialData._textureOperations.x) * 255)
#define dvd_TexOperationsB(materialData) uvec4(unpackUnorm4x8(materialData._textureOperations.y) * 255)
#define dvd_TexOpUnit0(materialData) dvd_TexOperationsA(materialData).x
#define dvd_TexOpSpecular(materialData) dvd_TexOperationsA(materialData).z
#define dvd_TexOpEmissive(materialData) dvd_TexOperationsA(materialData).w
#define dvd_TexOpOpacity(materialData)  dvd_TexOperationsB(materialData).w

#define dvd_OMR(materialData) unpackUnorm4x8(materialData._data.x).rgb
#define dvd_IsDoubleSided(materialData) (uint(unpackUnorm4x8(materialData._data.x).a) == 1u)
#define dvd_Specular(materialData) unpackUnorm4x8(materialData._data.y).rgb
#define dvd_UsePackedOMR(materialData) (uint(unpackUnorm4x8(materialData._data.y).w) == 1u)
#define dvd_BumpMethod(X) uint(unpackUnorm4x8(dvd_Materials[X]._data.z).x * 255)
#define dvd_ShadingMode(materialData) uint(unpackUnorm4x8(materialData._data.z).y * 255)
#define dvd_ProbeIndex(materialData) materialData._data.w

#define dvd_UseAlbedoTextureAlphaChannel(materialData) (uint(unpackUnorm4x8(materialData._textureOperations.z).x) == 1u)
#define dvd_UseOpacityAlphaChannel(materialData) (uint(unpackUnorm4x8(materialData._textureOperations.z).y) == 1u)
#define dvd_SpecularGloss(materialData) unpackUnorm4x8(materialData._textureOperations.z).zw
#define dvd_ReceivesShadows(materialData) (uint(unpackUnorm4x8(materialData._textureOperations.w).x) == 1u)
#define dvd_ParallaxFactor(X) dvd_Materials[X]._emissiveAndParallax.a

#endif //FRAG_SHADER

#define dvd_WorldMatrix(transformData) transformData._worldMatrix
#define dvd_NormalMatrixW(transformData) mat3(transformData._normalMatrixW)
#define dvd_NodeData(transformData) unpackUnorm4x8(uint(transformData._normalMatrixW[0][3]))
#define dvd_SelectionFlag(transformData) uint(dvd_NodeData(transformData).y * 255)
#define dvd_LoDLevel(transformData) uint(dvd_NodeData(transformData).z * 255)
#define dvd_CullNode(transformData) (uint(dvd_NodeData(transformData).w * 255) == 1u)
#define dvd_AnimationFrame(transformData) uint(transformData._normalMatrixW[1][3])
#define dvd_BoneCount(transformData) uint(transformData._normalMatrixW[2][3])
#define dvd_BoundingSphere(transformData) transformData._normalMatrixW[3]

#endif //_NODE_DATA_DEFINITION_CMN_
