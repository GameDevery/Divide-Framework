#include "Headers/glResources.h" 

#include <glm.hpp>
#include <gtc/matrix_transform.hpp>
#include <gtc/type_ptr.hpp>

namespace Divide {
	namespace GL {
/*----------- GLU overrides ------*/

    void _LookAt(GLfloat eyeX, GLfloat eyeY, GLfloat eyeZ,
		 		 GLfloat lookAtX, GLfloat lookAtY, GLfloat lookAtZ,
				 GLfloat upX, GLfloat upY, GLfloat upZ){

        _modelViewMatrix.top() = glm::lookAt(glm::vec3(eyeX,eyeY,eyeZ),
                                             glm::vec3(lookAtX,lookAtY,lookAtZ),
                                             glm::vec3(upX,upY,upZ));
        _multMatrix(_modelViewMatrix.top());
    }

    void _ortho(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar){
        _projectionMatrix.top() = glm::ortho(left,right,bottom,top,zNear,zFar);
        _multMatrix(_projectionMatrix.top());
    }

    void _perspective(GLfloat fovy, GLfloat aspect, GLfloat zNear, GLfloat zFar){
        _projectionMatrix.top() = glm::perspective(fovy,aspect,zNear,zFar);
        _multMatrix(_projectionMatrix.top());
    }

    void _matrixMode(MATRIX_MODE mode) {
        _currentMatrixMode = mode;
        glMatrixMode( mode == PROJECTION_MATRIX ? GL_PROJECTION : GL_MODELVIEW);
    }

    void _pushMatrix(){
        if(_currentMatrixMode == PROJECTION_MATRIX){
            _projectionMatrix.push(_projectionMatrix.top());
        }else{
            _modelViewMatrix.push(_modelViewMatrix.top());
        }
        glPushMatrix();
    }

    void _popMatrix(){
        if(_currentMatrixMode == PROJECTION_MATRIX){
            _projectionMatrix.pop();
        }else{
            _modelViewMatrix.pop();
        }
        glPopMatrix();
    }

    void _loadIdentity(){
        if(_currentMatrixMode == PROJECTION_MATRIX){
            _projectionMatrix.top() = glm::mat4();
        }else{
            _modelViewMatrix.top() = glm::mat4();
        }
        glLoadIdentity();
    }

    void _multMatrix(const glm::mat4& matrix){
        if(_currentMatrixMode == PROJECTION_MATRIX){
            _projectionMatrix.top *= matrix;
        }else{
            _modelViewMatrix.top *= matrix;
        }
        glMultMatrixf(glm::value_ptr(matrix));
    }

    void _scale(GLfloat x, GLfloat y, GLfloat z){

        GLCheck(glScalef(x,y,z));

    }

	}//namespace GL
}// namespace Divide