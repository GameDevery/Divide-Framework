set(AVX512F_OPT OFF)
set(AVX512VL_OPT OFF)
set(AVX512DQ_OPT OFF)
set(AVX2_OPT OFF)
set(AVX_OPT OFF)
set(SSE41_OPT OFF)
set(SSE42_OPT OFF)
set(FMA_OPT OFF)
set(FMA4_OPT OFF)
set(BMI1_OPT OFF)
set(BMI2_OPT OFF)
set(LZCNT_OPT OFF)
set(F16C_OPT OFF)
set(EXTENSIONS "")

function (Toggle_Available_Vector_Extensions)

    if(APPLE)
        set(SSE42_OPT ON)
        message("macOS detected: Only SSE4.1 enabled, skipping other vector extension checks.")
    else()
        AutodetectHostArchitecture()
        OptimizeForArchitecture()

        foreach(flag ${_enable_vector_unit_list})
            string(TOUPPER "${flag}" flag)
            string(REPLACE "\." "_" flag "${flag}")
            string(REPLACE "_" "" flag "${flag}")

            if( "${flag}" MATCHES "AVX512F")
                set(AVX512F_OPT ON)
            elseif( "${flag}" MATCHES "AVX512VL")
                set(AVX512VL_OPT ON)
            elseif( "${flag}" MATCHES "AVX512DQ")
                set(AVX512DQ_OPT ON)
            elseif("${flag}" MATCHES "AVX2")
                set(AVX2_OPT ON)
            elseif("${flag}" MATCHES "AVX")
                set(AVX_OPT ON)
            elseif("${flag}" MATCHES "SSE42")
                set(SSE42_OPT ON)
            elseif("${flag}" MATCHES "SSE41")
                set(SSE41_OPT ON)
            elseif("${flag}" MATCHES "fma")
                set(FMA_OPT ON)
            elseif("${flag}" MATCHES "fma4")
                set(FMA4_OPT ON)
            elseif("${flag}" MATCHES "bmi")
                set(BMI1_OPT ON)
            elseif("${flag}" MATCHES "bmi2")
                set(BMI2_OPT ON)
                set(LZCNT_OPT ON)
            elseif("${flag}" MATCHES "f16c")
                set(F16C_OPT ON)
            endif()

        endforeach(flag)
    endif()

    if ( AVX512F_OPT OR AVX512VL_OPT OR AVX512DQ_OPT )
        set(AVX2_OPT ON)
        set(LZCNT_OPT ON)
        set(BMI2_OPT ON)
        set(F16C_OPT ON)
        set(FMA_OPT ON)
    endif()
    if ( AVX2_OPT )
        set(AVX_OPT ON)
        set(LZCNT_OPT ON)
        set(F16C_OPT ON)
        set(BMI1_OPT ON)
    endif()
    if ( AVX_OPT )
        set(SSE42_OPT ON)
    endif()
    if ( SSE42_OPT)
        set(SSE41_OPT ON)
    endif()

    if (NOT SSE41_OPT)
        message(FATAL_ERROR "SSE4.1 was not detected. SSE4.1 is a minimum requirement in order for the build to proceed!")
    endif()

    if ( WINDOWS_OS_BUILD )

        if ( AVX512F_OPT AND AVX512VL_OPT AND AVX512DQ_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " /arch:AVX512")
        elseif(AVX2_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " /arch:AVX2")
        else(AVX_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " /arch:AVX")
        endif()

    else() #WINDOWS_OS_BUILD

        if ( AVX512F_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx512f")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-avx512f")
        endif()

        if ( AVX512VL_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx512vl")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-avx512vl")
        endif()

        if ( AVX512DQ_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx512dq")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-avx512dq")
        endif()

        if (AVX2_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx2")
        elseif (AVX_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx -mno-avx2")
        elseif (SSE42_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -msse4.2 -mno-avx -mno-avx2")
        elseif (SSE41_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -msse4.1 -mno-sse4.2 -mno-avx -mno-avx2")
        endif()
    endif () #WINDOWS_OS_BUILD

    if ( NOT MSVC_COMPILER )
        if ( SSE42_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -mpopcnt")
        endif()

        if ( FMA_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mfma")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-fma")
        endif()
        
        if ( FMA4_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mfma4")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-fma4")
        endif()

        if ( BMI1_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mbmi")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-bmi")
        endif()
         
        if ( BMI2_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mbmi2")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-bmi2")
        endif()
        
        if ( LZCNT_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mlzcnt")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-lzcnt")
        endif()

        if ( F16C_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -f16c")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-f16c")
        endif()

    endif() #NOT MSVC_COMPILER

    if (AVX512F_OPT)
        set(EXTENSIONS "AVX512F")
        list(APPEND EXTRA_DEFINITIONS HAS_AVX512F)
    else()
        set(EXTENSIONS "NO-AVX512F")
    endif()

    if (AVX512VL_OPT)
        list(APPEND EXTENSIONS ", AVX512VL")
        list(APPEND EXTRA_DEFINITIONS HAS_AVX512VL)
    else()
        list(APPEND EXTENSIONS ", NO-AVX512VL")
    endif()

    if (AVX512DQ_OPT)
        list(APPEND EXTENSIONS ", AVX512DQ")
        list(APPEND EXTRA_DEFINITIONS AVX512DQ)
    else()
        list(APPEND EXTENSIONS ", NO-AVX512DQ")
    endif()

    if (AVX2_OPT)
        list(APPEND EXTENSIONS ", AVX2")
        list(APPEND EXTRA_DEFINITIONS HAS_AVX2)
    else()
        list(APPEND EXTENSIONS ", NO-AVX2")
    endif()

    if (AVX_OPT)
        list(APPEND EXTENSIONS ", AVX")
        list(APPEND EXTRA_DEFINITIONS HAS_AVX)
    else()
        list(APPEND EXTENSIONS ", NO-AVX")
    endif()

    if (SSE42_OPT)
        list(APPEND EXTENSIONS ", SSE4.2")
        list(APPEND EXTRA_DEFINITIONS HAS_SSE42)
    else()
        list(APPEND EXTENSIONS ", NOSSE4.2")
    endif()

    if (SSE41_OPT)
        list(APPEND EXTENSIONS ", SSE4.1")
        list(APPEND EXTRA_DEFINITIONS HAS_SSE41)
    else()
        list(APPEND EXTENSIONS ", NO-SSE4.1")
    endif()

    if ( FMA_OPT )
        list(APPEND EXTENSIONS ", FMA")
        list(APPEND EXTRA_DEFINITIONS HAS_FMA)
    else()
        list(APPEND EXTENSIONS ", NO-FMA")
    endif()
        
    if ( FMA4_OPT )
        list(APPEND EXTENSIONS ", FMA4")
        list(APPEND EXTRA_DEFINITIONS HAS_FMA4)
    else()
        list(APPEND EXTENSIONS ", NO-FMA4")
    endif()

    if ( BMI1_OPT )
        list(APPEND EXTENSIONS ", BMI")
        list(APPEND EXTRA_DEFINITIONS HAS_BMI1)
    else()
        list(APPEND EXTENSIONS ", NO_BMI")
    endif()
         
    if ( BMI2_OPT )
        list(APPEND EXTENSIONS " BMI2")
        list(APPEND EXTRA_DEFINITIONS HAS_BMI2)
    else()
        list(APPEND EXTENSIONS " NO-BMI2")
    endif()
        
    if ( LZCNT_OPT )
        list(APPEND EXTENSIONS " LZCNT")
        list(APPEND EXTRA_DEFINITIONS HAS_LZCNT)
    else()
        list(APPEND EXTENSIONS " NO-LZCNT")
    endif()

    if ( F16C_OPT )
        list(APPEND EXTENSIONS " F16C")
        list(APPEND EXTRA_DEFINITIONS HAS_F16C)
    else()
        list(APPEND EXTENSIONS " NO-F16C")
    endif()

    set(AVX512F_OPT  ${AVX512F_OPT}  PARENT_SCOPE)
    set(AVX512VL_OPT ${AVX512VL_OPT} PARENT_SCOPE)
    set(AVX512DQ_OPT ${AVX512DQ_OPT} PARENT_SCOPE)
    set(AVX2_OPT     ${AVX2_OPT}     PARENT_SCOPE)
    set(AVX_OPT      ${AVX_OPT}      PARENT_SCOPE)
    set(SSE42_OPT    ${SSE42_OPT}    PARENT_SCOPE)
    set(SSE41_OPT    ${SSE41_OPT}    PARENT_SCOPE)
    set(FMA_OPT      ${FMA_OPT}      PARENT_SCOPE)
    set(FMA4_OPT     ${FMA4_OPT}     PARENT_SCOPE)
    set(BMI1_OPT     ${BMI1_OPT}     PARENT_SCOPE)
    set(BMI2_OPT     ${BMI2_OPT}     PARENT_SCOPE)
    set(LZCNT_OPT    ${LZCNT_OPT}    PARENT_SCOPE)
    set(F16C_OPT     ${F16C_OPT}     PARENT_SCOPE)
    set(EXTENSIONS}  ${EXTENSIONS}   PARENT_SCOPE)

    message("Found target architecture [ " ${TARGET_ARCHITECTURE} " ] with the following available extensions: " ${EXTENSIONS})
    message("Extension specific compiler options: " ${EXTRA_COMPILE_FLAGS})

endfunction()
