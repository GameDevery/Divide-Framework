#include "UnitTests/unitTestCommon.h"

namespace Divide
{

TEST_CASE( "Fits In Registers", "[data_type_tests]" )
{
    CHECK_TRUE(fits_in_registers<U8>());
    CHECK_TRUE(fits_in_registers<U16>());
    CHECK_TRUE(fits_in_registers<U32>());
    CHECK_TRUE(fits_in_registers<I8>());
    CHECK_TRUE(fits_in_registers<I16>());
    CHECK_TRUE(fits_in_registers<I32>());
    CHECK_TRUE(fits_in_registers<U64>());
    CHECK_TRUE(fits_in_registers<vec2<U8>>());
    CHECK_TRUE(fits_in_registers<vec2<U16>>());
    CHECK_TRUE(fits_in_registers<vec2<U32>>());
    CHECK_FALSE(fits_in_registers<vec2<U64>>());
    CHECK_TRUE(fits_in_registers<vec2<I8>>());
    CHECK_TRUE(fits_in_registers<vec2<I16>>());
    CHECK_TRUE(fits_in_registers<vec2<I32>>());
    CHECK_FALSE(fits_in_registers<vec2<I64>>());
    CHECK_TRUE(fits_in_registers<vec2<F32>>());
    CHECK_FALSE(fits_in_registers<vec2<D64>>());
    CHECK_TRUE(fits_in_registers<mat2<U8>>());
    CHECK_TRUE(fits_in_registers<mat2<U16>>());
    CHECK_FALSE(fits_in_registers<mat2<U32>>());
    CHECK_FALSE(fits_in_registers<mat2<U64>>());
    CHECK_TRUE(fits_in_registers<mat2<I8>>());
    CHECK_TRUE(fits_in_registers<mat2<I16>>());
    CHECK_FALSE(fits_in_registers<mat2<I32>>());
    CHECK_FALSE(fits_in_registers<mat2<I64>>());
    CHECK_FALSE(fits_in_registers<mat2<F32>>());
    CHECK_FALSE(fits_in_registers<mat2<D64>>());
    CHECK_FALSE(fits_in_registers<vec3<U8>>());
    CHECK_FALSE(fits_in_registers<vec3<U16>>());
    CHECK_FALSE(fits_in_registers<vec3<U32>>());
    CHECK_FALSE(fits_in_registers<vec3<U64>>());
    CHECK_FALSE(fits_in_registers<vec3<I8>>());
    CHECK_FALSE(fits_in_registers<vec3<I16>>());
    CHECK_FALSE(fits_in_registers<vec3<I32>>());
    CHECK_FALSE(fits_in_registers<vec3<I64>>());
    CHECK_FALSE(fits_in_registers<vec3<F32>>());
    CHECK_FALSE(fits_in_registers<vec3<D64>>());
    CHECK_FALSE(fits_in_registers<mat3<U8>>());
    CHECK_FALSE(fits_in_registers<mat3<U16>>());
    CHECK_FALSE(fits_in_registers<mat3<U32>>());
    CHECK_FALSE(fits_in_registers<mat3<U64>>());
    CHECK_FALSE(fits_in_registers<mat3<I8>>());
    CHECK_FALSE(fits_in_registers<mat3<I16>>());
    CHECK_FALSE(fits_in_registers<mat3<I32>>());
    CHECK_FALSE(fits_in_registers<mat3<I64>>());
    CHECK_FALSE(fits_in_registers<mat3<F32>>());
    CHECK_FALSE(fits_in_registers<mat3<D64>>());
    CHECK_TRUE(fits_in_registers<vec4<U8>>());
    CHECK_TRUE(fits_in_registers<vec4<U16>>());
    CHECK_FALSE(fits_in_registers<vec4<U32>>());
    CHECK_FALSE(fits_in_registers<vec4<U64>>());
    CHECK_TRUE(fits_in_registers<vec4<I8>>());
    CHECK_TRUE(fits_in_registers<vec4<I16>>());
    CHECK_FALSE(fits_in_registers<vec4<I32>>());
    CHECK_FALSE(fits_in_registers<vec4<I64>>());
    CHECK_FALSE(fits_in_registers<vec4<F32>>());
    CHECK_FALSE(fits_in_registers<vec4<D64>>());
    CHECK_FALSE(fits_in_registers<mat4<U8>>());
    CHECK_FALSE(fits_in_registers<mat4<U16>>());
    CHECK_FALSE(fits_in_registers<mat4<U32>>());
    CHECK_FALSE(fits_in_registers<mat4<U64>>());
    CHECK_FALSE(fits_in_registers<mat4<I8>>());
    CHECK_FALSE(fits_in_registers<mat4<I16>>());
    CHECK_FALSE(fits_in_registers<mat4<I32>>());
    CHECK_FALSE(fits_in_registers<mat4<I64>>());
    CHECK_FALSE(fits_in_registers<mat4<F32>>());
    CHECK_FALSE(fits_in_registers<mat4<D64>>());

    CHECK_FALSE( fits_in_registers<eastl::vector<mat4<F32>>>() );
    CHECK_FALSE( fits_in_registers<std::shared_ptr<vec3<U8>>>() );
    CHECK_TRUE( fits_in_registers<std::unique_ptr<mat3<I16>>>() );
}

TEST_CASE( "Can Be Returned By Value", "[data_type_tests]" )
{
    CHECK_TRUE( can_be_returned_by_value<U8>() );
    CHECK_TRUE( can_be_returned_by_value<U16>() );
    CHECK_TRUE( can_be_returned_by_value<U32>() );
    CHECK_TRUE( can_be_returned_by_value<I8>() );
    CHECK_TRUE( can_be_returned_by_value<I16>() );
    CHECK_TRUE( can_be_returned_by_value<I32>() );
    CHECK_TRUE( can_be_returned_by_value<U64>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<U8>>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<U16>>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<U32>>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<U64>>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<I8>>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<I16>>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<I32>>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<I64>>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<F32>>() );
    CHECK_TRUE( can_be_returned_by_value<vec2<D64>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<U8>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<U16>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<U32>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<U64>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<I8>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<I16>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<I32>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<I64>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<F32>>() );
    CHECK_TRUE( can_be_returned_by_value<mat2<D64>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<U8>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<U16>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<U32>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<U64>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<I8>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<I16>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<I32>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<I64>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<F32>>() );
    CHECK_TRUE( can_be_returned_by_value<vec3<D64>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<U8>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<U16>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<U32>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<U64>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<I8>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<I16>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<I32>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<I64>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<F32>>() );
    CHECK_TRUE( can_be_returned_by_value<mat3<D64>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<U8>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<U16>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<U32>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<U64>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<I8>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<I16>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<I32>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<I64>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<F32>>() );
    CHECK_TRUE( can_be_returned_by_value<vec4<D64>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<U8>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<U16>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<U32>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<U64>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<I8>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<I16>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<I32>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<I64>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<F32>>() );
    CHECK_TRUE( can_be_returned_by_value<mat4<D64>>() );

    CHECK_TRUE( can_be_returned_by_value<eastl::vector<vec4<I8>>>() );
    CHECK_TRUE (can_be_returned_by_value<std::shared_ptr<vec2<I32>>>());
    CHECK_FALSE (can_be_returned_by_value<std::unique_ptr<vec3<F32>>>());
}

TEST_CASE( "Pass By Value", "[data_type_tests]" )
{
    CHECK_TRUE( pass_by_value<U8>() );
    CHECK_TRUE( pass_by_value<U16>() );
    CHECK_TRUE( pass_by_value<U32>() );
    CHECK_TRUE( pass_by_value<U64>() );
    CHECK_TRUE( pass_by_value<I8>() );
    CHECK_TRUE( pass_by_value<I16>() );
    CHECK_TRUE( pass_by_value<I32>() );
    CHECK_TRUE( pass_by_value<I64>() );
    CHECK_TRUE( pass_by_value<vec2<U8>>() );
    CHECK_TRUE( pass_by_value<vec2<U16>>() );
    CHECK_TRUE( pass_by_value<vec2<U32>>() );
    CHECK_FALSE( pass_by_value<vec2<U64>>() );
    CHECK_TRUE( pass_by_value<vec2<I8>>() );
    CHECK_TRUE( pass_by_value<vec2<I16>>() );
    CHECK_TRUE( pass_by_value<vec2<I32>>() );
    CHECK_FALSE( pass_by_value<vec2<I64>>() );
    CHECK_TRUE( pass_by_value<vec2<F32>>() );
    CHECK_FALSE( pass_by_value<vec2<D64>>() );
    CHECK_TRUE( pass_by_value<mat2<U8>>() );
    CHECK_TRUE( pass_by_value<mat2<U16>>() );
    CHECK_FALSE( pass_by_value<mat2<U32>>() );
    CHECK_FALSE( pass_by_value<mat2<U64>>() );
    CHECK_TRUE( pass_by_value<mat2<I8>>() );
    CHECK_TRUE( pass_by_value<mat2<I16>>() );
    CHECK_FALSE( pass_by_value<mat2<I32>>() );
    CHECK_FALSE( pass_by_value<mat2<I64>>() );
    CHECK_FALSE( pass_by_value<mat2<F32>>() );
    CHECK_FALSE( pass_by_value<mat2<D64>>() );
    CHECK_FALSE( pass_by_value<vec3<U8>>() );
    CHECK_FALSE( pass_by_value<vec3<U16>>() );
    CHECK_FALSE( pass_by_value<vec3<U32>>() );
    CHECK_FALSE( pass_by_value<vec3<U64>>() );
    CHECK_FALSE( pass_by_value<vec3<I8>>() );
    CHECK_FALSE( pass_by_value<vec3<I16>>() );
    CHECK_FALSE( pass_by_value<vec3<I32>>() );
    CHECK_FALSE( pass_by_value<vec3<I64>>() );
    CHECK_FALSE( pass_by_value<vec3<F32>>() );
    CHECK_FALSE( pass_by_value<vec3<D64>>() );
    CHECK_FALSE( pass_by_value<mat3<U8>>() );
    CHECK_FALSE( pass_by_value<mat3<U16>>() );
    CHECK_FALSE( pass_by_value<mat3<U32>>() );
    CHECK_FALSE( pass_by_value<mat3<U64>>() );
    CHECK_FALSE( pass_by_value<mat3<I8>>() );
    CHECK_FALSE( pass_by_value<mat3<I16>>() );
    CHECK_FALSE( pass_by_value<mat3<I32>>() );
    CHECK_FALSE( pass_by_value<mat3<I64>>() );
    CHECK_FALSE( pass_by_value<mat3<F32>>() );
    CHECK_FALSE( pass_by_value<mat3<D64>>() );
    CHECK_TRUE( pass_by_value<vec4<U8>>() );
    CHECK_TRUE( pass_by_value<vec4<U16>>() );
    CHECK_FALSE( pass_by_value<vec4<U32>>() );
    CHECK_FALSE( pass_by_value<vec4<U64>>() );
    CHECK_TRUE( pass_by_value<vec4<I8>>() );
    CHECK_TRUE( pass_by_value<vec4<I16>>() );
    CHECK_FALSE( pass_by_value<vec4<I32>>() );
    CHECK_FALSE( pass_by_value<vec4<I64>>() );
    CHECK_FALSE( pass_by_value<vec4<F32>>() );
    CHECK_FALSE( pass_by_value<vec4<D64>>() );
    CHECK_FALSE( pass_by_value<mat4<U8>>() );
    CHECK_FALSE( pass_by_value<mat4<U16>>() );
    CHECK_FALSE( pass_by_value<mat4<U32>>() );
    CHECK_FALSE( pass_by_value<mat4<U64>>() );
    CHECK_FALSE( pass_by_value<mat4<I8>>() );
    CHECK_FALSE( pass_by_value<mat4<I16>>() );
    CHECK_FALSE( pass_by_value<mat4<I32>>() );
    CHECK_FALSE( pass_by_value<mat4<I64>>() );
    CHECK_FALSE( pass_by_value<mat4<F32>>() );
    CHECK_FALSE( pass_by_value<mat4<D64>>() );

    CHECK_FALSE( pass_by_value<eastl::vector<vec4<I8>>>() );
    CHECK_FALSE( pass_by_value<std::shared_ptr<vec3<I8>>>() );
    CHECK_FALSE( pass_by_value<std::unique_ptr<vec4<D64>>>() );
}

} //namespace Divide